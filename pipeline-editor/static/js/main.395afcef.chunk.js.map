{"version":3,"sources":["DragNDrop/index.tsx","AppFooter.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","componentStore.ts","componentSpec.ts","DragNDrop/ArgumentsEditorDialog.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/GraphComponentSpecFlow.tsx","appSettings.ts","github.ts","DragNDrop/samplePipelines.ts","cacheUtils.ts","DragNDrop/DraggableComponent.tsx","DragNDrop/ArgumentsEditor.tsx","DragNDrop/vertexPipelineSpec.ts","DragNDrop/vertexAiCompiler.ts","DragNDrop/Sidebar.tsx","DragNDrop/ComponentLibrary.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/GraphComponentExporter.tsx","DragNDrop/GoogleCloud.tsx","DragNDrop/VertexAiExporter.tsx","DragNDrop/UserComponentLibrary.tsx","DragNDrop/GraphComponentLink.tsx","DragNDrop/SamplePipelineLibrary.tsx","DragNDrop/PipelineLibrary.tsx"],"names":["SAVED_COMPONENT_SPEC_KEY","ComponentSpecAutoSaver","componentSpec","nodes","useStoreState","store","undefined","length","console","warn","augmentComponentSpec","componentText","componentSpecToYaml","window","sessionStorage","setItem","err","message","startsWith","error","saveComponentSpec","isAppleOS","navigator","platform","DnDFlow","useState","setComponentSpec","restoredComponentSpec","getItem","loadedYaml","yaml","load","loadComponentSpec","loadComponentFromUrl","defaultPipelineUrl","then","className","GraphComponentSpecFlow","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","Sidebar","AppFooter","style","width","height","padding","textAlign","backgroundColor","display","Link","href","underline","target","rel","marginLeft","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","DB_NAME","DIGEST_TO_DATA_DB_TABLE_NAME","DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME","URL_TO_DIGEST_DB_TABLE_NAME","DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME","FILE_STORE_DB_TABLE_NAME_PREFIX","calculateHashDigestHex","data","a","dataBytes","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","storeComponentSpec","digestToComponentSpecDb","localForage","createInstance","name","storeName","digestToComponentNameDb","loadComponentAsRefFromText","componentString","TextDecoder","decode","componentBytes","loadedObj","Error","isValidComponentSpec","componentRefPlusData","componentRef","spec","storeComponentText","digestToComponentTextDb","storeComponentFromUrl","url","setUrlAsCanonical","urlToDigestDb","digestToDataDb","existingDigest","componentData","arrayBuffer","digestToCanonicalUrlDb","existingCanonicalUrl","debug","makeNameUniqueByAddingIndex","existingNames","finalName","index","has","writeComponentRefPlusDataToFile","listName","fileName","upgradeSingleComponentListDb","tableName","componentListDb","existingFile","currentTime","Date","fileEntry","creationTime","modificationTime","addComponentRefPlusDataToList","Set","keys","uniqueFileName","addComponentToListByUrl","defaultFileName","addComponentToListByText","writeComponentToFileListFromText","getAllComponentFilesFromList","componentFiles","Map","iterate","iterationNumber","set","getComponentFileFromList","deleteComponentFileFromList","removeItem","dump","lineWidth","componentListVersionKey","componentStoreSettingsDb","componentListTableName","listFormatVersion","includes","componentRefListsDb","componentRefList","emptyNameReplacement","add","fileNames","newDigest","newFileEntry","obj","isContainerImplementation","implementation","isGraphImplementation","ArgumentsEditorDialog","taskSpec","closeEditor","setArguments","arguments","currentArguments","setCurrentArguments","onSubmit","e","preventDefault","position","background","border","borderRadius","ArgumentsEditor","componentArguments","setComponentArguments","type","onClick","inputHandlePosition","Position","Top","outputHandlePosition","Bottom","isComponentTaskNode","node","generateHandles","ioSpecs","handleType","idPrefix","inputsWithMissingArguments","handleComponents","numHandles","i","ioSpec","id","positionPercentString","String","left","top","ioTypeName","classNames","replace","push","generateLabelStyle","labelClasses","labelStyle","isConnectable","title","maxLabelWidthPx","maxWidth","ComponentTaskNode","isArgumentsEditorOpen","setIsArgumentsEditorOpen","label","inputsWithInvalidArguments","inputs","filter","inputSpec","optional","default","inputHandles","inputSpecs","generateInputHandles","outputHandles","outputs","concat","onDoubleClick","taskId","SDK_ANNOTATION_VALUE","taskIdToNodeId","inputNameToNodeId","outputNameToNodeId","nodeIdToTaskId","nodeIdToInputName","nodeIdToOutputName","includeSpecs","includePositions","getNodePositionAnnotation","JSON","stringify","x","__rf","y","nodeXPositionComparer","n1","n2","deltaX","deltaY","nodeYPositionComparer","inputNodes","sort","outputNodes","taskNodes","inputPositionMap","inputOrderMap","inputOrderComparer","Infinity","outputPositionMap","outputOrderMap","outputOrderComparer","taskPositionMap","taskOrderMap","taskOrderComparer","pairA","pairB","newAnnotations","annotations","NODE_LAYOUT_ANNOTATION_KEY","newInputSpec","Object","outputSpec","newOutputSpec","graphSpec","graph","newTasks","fromEntries","entries","tasks","newTaskSpec","rebuildComponentSpec","description","metadata","rest","nodeTypes","task","memo","children","reactFlowInstance","setReactFlowInstance","layoutAnnotation","decodedPosition","parse","args","setTaskArguments","edges","flatMap","inputName","argument","taskOutput","outputName","source","sourceHandle","targetHandle","arrowHeadType","ArrowHeadType","ArrowClosed","graphInput","outputEdges","outputValues","elements","replaceComponentSpec","newComponentSpec","replaceGraphSpec","newGraphSpec","taskArguments","setTaskArgument","oldTaskSpecArguments","newTaskSpecArguments","removeTaskArgument","setGraphOutputValue","outputValue","newGraphOutputValues","removeGraphOutputValue","addConnection","connection","targetTaskInputName","sourceTaskOutputName","taskOutputArgument","graphInputArgument","removeEdge","edge","removeNode","inputNameToRemove","newInputs","removeComponentInput","outputNameToRemove","newOutputs","removeComponentOutput","taskIdToRemove","removeTask","onConnect","params","onDragOver","event","dataTransfer","dropEffect","onDrop","droppedData","getData","droppedDataObject","nodeType","nodeData","dragOffsetX","dragOffsetY","dragStartOffsetData","dragStartOffset","offsetX","offsetY","project","clientX","clientY","nodePosition","positionAnnotations","mergedAnnotations","taskSpecWithAnnotation","getUniqueTaskName","getUniqueInputName","getUniqueOutputName","onEdgeUpdate","oldEdge","newConnection","onElementsRemove","elementsToRemove","element","isEdge","isNode","onLoad","_reactFlowInstance","componentLibraryUrl","pipelineLibraryUrl","componentSearchConfig","ComponentFeedUrls","GitHubSearchLocations","googleCloudOAuthClientId","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","getSingleGitHubCodeSearchPageWithCache","query","page","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","httpGetWithCache","json","githubHtmlUrlToDownloadUrl","htmlUrl","searchComponentsOnGitHubToGetUrlsAndHashes","searchLocations","urlsAndHashes","queryParts","searchResults","items","item","html_url","hash","sha","Promise","resolve","setTimeout","downloadComponentDataWithCache","blob","text","componentSpecObj","importComponentsFromGitHubSearch","urlsAndHashesIterator","urlToHashDb","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","badHashReason","downloadUrl","endsWith","cachedHash","urlVersion","Number","parseInt","isComponentFeedEntry","isComponentFeed","isArray","every","isComponentFeedEntryArray","notUndefined","calculateGitBlobSha1HashHex","dataString","gitDataString","gitDataBytes","importComponentsFromFeed","componentFeedUrl","componentFeedCandidateBlob","componentFeedCandidateText","componentFeedCandidateObject","componentFeed","all","components","entry","urlsHashesAndData","error_message","refreshComponentDb","getAllComponentsAsRefs","hashToComponentRef","preloadComponentReferences","componentRefs","forEach","isComponentDbEmpty","searchComponentsByName","ref","componentMap","values","componentUrl","taskComponentSpec","preloadChildComponentSpecs","urlOrRequest","cacheName","updateIfInCache","caches","open","cache","response2","reject","DraggableComponent","componentReference","props","draggable","onDragStart","setData","nativeEvent","effectAllowed","shrinkToWidth","borderSpacing","tableLayout","value","placeholder","typeSpec","argumentIsRequiredButMissing","typeSpecString","whiteSpace","overflow","textOverflow","verticalAlign","borderWidth","minWidth","required","pattern","onChange","disabled","PrimitiveTypeEnum","TriggerStrategy","sanitizePipelineInfoName","pipelineContextName","typeSpecToVertexPrimitiveTypeEnum","vertex","INT","DOUBLE","STRING","typeSpecToVertexParameterSpec","stringToMlmdValue","constantString","primitiveType","stringValue","intValue","doubleValue","parseFloat","MAKE_ARTIFACT_COMPONENT_ID","MAKE_ARTIFACT_EXECUTOR_ID","MAKE_ARTIFACT_INPUT_NAME","MAKE_ARTIFACT_OUTPUT_NAME","buildMakeArtifactTaskSpec","parameterArgumentSpec","taskInfo","parameters","cachingOptions","enableCache","makeArtifactComponentSpec","executorLabel","inputDefinitions","outputDefinitions","artifacts","artifactType","schemaTitle","makeArtifactExecutorSpec","container","image","command","buildVertexParameterArgumentSpec","taskArgument","runtimeValue","constantValue","componentInputParameter","taskOutputParameter","producerTask","outputParameterKey","buildVertexArtifactArgumentSpec","upstreamCannotBeArtifact","addMakeArtifactTaskAndGetArtifactArgumentSpec","result","componentInputArtifact","taskOutputArtifact","outputArtifactKey","assertDefined","TypeError","buildVertexComponentSpecFromContainerComponentSpec","inputsThatHaveParameterArguments","addExecutorAndGetId","containerSpec","resolvedCommandLine","inputsConsumedAsParameter","inputsConsumedAsArtifact","convertArg","arg","inputValue","inputPath","outputPath","if","cond","else","ifCond","ifThen","ifElse","condEvaluatesToTrue","isPresent","unresolvedArgs","resolveCommandLine","vertexExecutorId","inputMap","buildVertexComponentSpecFromGraphComponentSpec","addComponentAndGetId","vertexTasks","taskStringToTaskId","addTaskAndGetId","namePrefix","serializedSpec","existingId","usedIds","makeArtifactExecutorId","makeArtifactComponentSpecCopy","makeArtifactComponentsId","makeArtifactTaskSpec","artifactArgumentSpec","vertexTaskSpec","buildVertexTaskSpecFromTaskSpec","inputNamesThatAreUsedBothAsParameterAndArtifact","inputNamesThatAreParametersButAreConsumedAsArtifacts","record","transform","dagOutputArtifactSpecs","artifactSelectors","producerSubtask","key","dag","buildVertexComponentSpecFromComponentSpec","graphInputsWithParameterArguments","vertexComponentSpec","vertexComponentId","vertexTaskParameterArguments","vertexTaskArtifactArguments","graphComponentSpecToVertexPipelineSpec","vertexExecutors","executorStringToExecutorId","vertexComponents","componentStringToComponentId","executor","component","pipelineArguments","pipelineComponentSpec","vertexPipelineSpec","pipelineInfo","sdkVersion","schemaVersion","deploymentSpec","executors","root","generateVertexPipelineJobFromGraphComponent","gcsOutputDirectory","pipelineSpec","inputParameterDefinitions","convertedPipelineArguments","pipelineJob","displayName","runtimeConfig","DebugScratchElement","NODE_ENV","DebugScratch","require","fontWeight","input","output","DraggableComponentRow","useEffect","SingleFolderVis","folder","isOpen","paddingLeft","folders","componentFolder","ComponentLibraryVisFromStruct","componentLibraryStruct","loadComponentLibraryStruct","componentLibrary","ComponentLibraryVisFromUrl","setComponentLibraryStruct","loadedComponentLibrary","SearchPanel","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","fetchData","gtag","GraphComponentExporter","graphComponent","componentTextBlob","Blob","downloadLink","createObjectURL","download","LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY","LOCAL_STORAGE_PROJECT_ID_KEY","LOCAL_STORAGE_REGION_KEY","LOCAL_STORAGE_PROJECT_IDS_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","scopes","immediate","clientId","gapi","auth","authorize","client_id","scope","authResult","receivedScopesString","receivedScopes","split","errorMessage","ensureGoogleCloudAuthorizesScopes","cloudresourcemanagerListProjects","client","request","path","aiplatformCreatePipelineJob","projectId","region","method","body","GoogleCloudSubmitter","localStorage","projects","setProjects","setProject","setRegion","setGcsOutputDirectory","pipelineJobWebUrl","setPipelineJobWebUrl","compilationError","setCompilationError","vertexPipelineJobJson","vertexPipelineJob","defaultInputValues","pipelineArgumentMap","pair","labels","vertexPipelineJobUrl","readyToSubmit","pipelineJobName","pipelineJobId","slice","margin","htmlFor","list","projectIds","projectInfo","VertexAiExporter","vertexPipelineSpecText","vertexPipelineSpecTextBlob","vertexPipelineSpecTextBlobUrl","USER_COMPONENTS_LIST_NAME","UserComponentLibrary","setErrorMessage","setComponentFiles","contextMenuFileName","setContextMenuFileName","contextMenuAnchor","setContextMenuAnchor","isImportComponentDialogOpen","setIsImportComponentDialogOpen","refreshComponents","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","binaryStr","readAsArrayBuffer","onImportFromUrl","componentFileEntry","handleContextMenuDelete","useDropzone","accept","getRootProps","getInputProps","isDragActive","marginBottom","minHeight","onContextMenu","currentTarget","anchorEl","onClose","dense","ImportComponentFromUrlDialog","onCancel","initialValue","onImport","urlInputRef","useRef","fullWidth","current","inputRef","autoFocus","color","GraphComponentLink","downloadFileName","linkText","linkRef","loadPipelineLibraryStruct","pipelineLibrary","SamplePipelineLibrary","setComponentRefs","pipelineUrls","loadedComponentRefs","USER_PIPELINES_LIST_NAME","removeSuffixes","s","suffixes","suffix","substring","SavePipelineAsDialog","onPipelineSave","initialName","setFileName","isOverwriteDialogOpen","setIsOverwriteDialogOpen","handleSave","onSave","inputLabel","okButtonText","onOk","OkCancelDialog","cancelButtonText","Dialog","aria-labelledby","DialogTitle","DialogActions","Button","SaveAsDialog","nameInputRef","DialogContent","TextField","defaultValue","PipelineLibrary","pipelineFile","setPipelineFile","saveAsDialogIsOpen","setSaveAsDialogIsOpen","refreshPipelines","openPipelineFile","componentRefPlusData1","componentRef1","openSaveAsDialog","closeSaveAsDialog","handlePipelineSave","handleContextMenuOpen","fileInput","componentLink","files","click","textDecoration","Menu","MenuItem"],"mappings":"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","file":"static/js/main.395afcef.chunk.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport {\r\n  ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  MiniMap,\r\n  Node,\r\n  useStoreState,\r\n} from 'react-flow-renderer';\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport { componentSpecToYaml } from '../componentStore';\r\nimport GraphComponentSpecFlow, { augmentComponentSpec } from './GraphComponentSpecFlow';\r\nimport Sidebar from './Sidebar';\r\nimport { defaultPipelineUrl } from '../appSettings';\r\nimport { loadComponentFromUrl } from \"./samplePipelines\";\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\nconst SAVED_COMPONENT_SPEC_KEY = \"autosaved.component.yaml\";\r\n\r\nconst saveComponentSpec = (componentSpec: ComponentSpec, nodes?: Node[]) => {\r\n  try {\r\n    if (nodes !== undefined) {\r\n      if (nodes.length === 0) {\r\n        console.warn(\"saveComponentSpec: nodes.length === 0\");\r\n      }\r\n      componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    }\r\n    const componentText = componentSpecToYaml(componentSpec);\r\n    window.sessionStorage.setItem(SAVED_COMPONENT_SPEC_KEY, componentText);\r\n  } catch(err) {\r\n    // TODO: Find a way to avoid the React/Redux race conditions causing this error.\r\n    if (err?.message?.startsWith(\"The nodes array does not\") !== true) {\r\n      console.error(err);\r\n    }\r\n  }\r\n}\r\n\r\nconst loadComponentSpec = () => {\r\n  try {\r\n    const componentText = window.sessionStorage.getItem(SAVED_COMPONENT_SPEC_KEY);\r\n    if (componentText !== null) {\r\n      const loadedYaml = yaml.load(componentText);\r\n      if (loadedYaml !== null && typeof loadedYaml === \"object\") {\r\n        //TODO: Validate that the spec is valid\r\n        const savedComponentSpec = loadedYaml as ComponentSpec;\r\n        return savedComponentSpec;\r\n      }\r\n    }\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Auto-saver is extracted to its own child component since useStoreState in the parent causes infinite re-rendering\r\n// (each render of GraphComponentSpecFlow seems to change the Redux store).\r\n// This component seems to be triggered for every node movement, so even pure layout changes are saved.\r\nconst ComponentSpecAutoSaver = ({\r\n  componentSpec,\r\n}: {\r\n  componentSpec: ComponentSpec;\r\n}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  // Fixing issue where a React error would cause all node positions to be recorded as undefined (`!<tag:yaml.org,2002:js/undefined>`)\r\n  // nodes should never be undefined in normal situation.\r\n  if (nodes !== undefined && nodes.length > 0) {\r\n    saveComponentSpec(componentSpec, nodes);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst isAppleOS = () =>\r\n  window.navigator.platform.startsWith(\"Mac\") ||\r\n  window.navigator.platform.startsWith(\"iPhone\") ||\r\n  window.navigator.platform.startsWith(\"iPad\") ||\r\n  window.navigator.platform.startsWith(\"iPod\");\r\n\r\nconst DnDFlow = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>();\r\n\r\n  if (componentSpec === undefined) {\r\n    const restoredComponentSpec = loadComponentSpec();\r\n    if (restoredComponentSpec === undefined) {\r\n      loadComponentFromUrl(defaultPipelineUrl).then(setComponentSpec);\r\n    } else {\r\n      setComponentSpec(restoredComponentSpec);\r\n    }\r\n  };\r\n\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <GraphComponentSpecFlow\r\n            componentSpec={componentSpec}\r\n            setComponentSpec={setComponentSpec}\r\n            deleteKeyCode={isAppleOS() ? \"Backspace\" : \"Delete\"}\r\n            multiSelectionKeyCode={isAppleOS() ? \"Command\" : \"Control\"}\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </GraphComponentSpecFlow>\r\n        </div>\r\n        <Sidebar\r\n          componentSpec={componentSpec}\r\n          setComponentSpec={setComponentSpec}\r\n        />\r\n        <ComponentSpecAutoSaver componentSpec={componentSpec}/>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { Link } from \"@material-ui/core\";\r\n\r\nfunction AppFooter() {\r\n  return (\r\n    <footer\r\n      className=\"footer\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"30px\",\r\n        padding: \"4px\",\r\n        textAlign: \"center\",\r\n        backgroundColor: \"ghostwhite\",\r\n      }}\r\n    >\r\n      <div style={{ display: \"inline-block\" }}>\r\n        <Link\r\n          href=\"https://github.com/Cloud-Pipelines/pipeline-editor/issues\"\r\n          underline=\"hover\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          Give feedback\r\n        </Link>\r\n        <Link\r\n          href=\"https://cloud-pipelines.net/privacy_policy\"\r\n          underline=\"hover\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          style={{ marginLeft: \"12px\" }}\r\n        >\r\n          Privacy policy\r\n        </Link>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default AppFooter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\nimport AppFooter from \"./AppFooter\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{ width: \"100%\", height: \"calc(100% - 30px)\" }}>\r\n      <DnDFlow />\r\n      <AppFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n//import { migrateUserData } from \"./userDataMigration\"\r\n\r\n// Migration is now disabled.\r\n// After 2 months of auto-migration, the redirect from cloud-pipelines.github.io\r\n// to cloud-pipelines.net was changed to hard redirect.\r\n// Accessing the data stored for cloud-pipelines.github.io is now impossible.\r\n// try {\r\n//   migrateUserData();\r\n// } catch (err) {\r\n//   console.error(err);\r\n// }\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  ComponentReference,\r\n  isValidComponentSpec,\r\n} from \"./componentSpec\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst DIGEST_TO_DATA_DB_TABLE_NAME = \"digest_to_component_data\";\r\nconst DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME = \"digest_to_component_spec\";\r\nconst DIGEST_TO_COMPONENT_NAME_DB_TABLE_NAME = \"digest_to_component_name\";\r\nconst URL_TO_DIGEST_DB_TABLE_NAME = \"url_to_digest\";\r\nconst DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME = \"digest_to_canonical_url\";\r\nconst COMPONENT_REF_LISTS_DB_TABLE_NAME = \"component_ref_lists\";\r\nconst COMPONENT_STORE_SETTINGS_DB_TABLE_NAME = \"component_store_settings\";\r\nconst FILE_STORE_DB_TABLE_NAME_PREFIX = \"file_store_\";\r\n\r\nexport interface ComponentReferenceWithSpec extends ComponentReference {\r\n  spec: ComponentSpec;\r\n  digest: string;\r\n}\r\n\r\nexport interface ComponentReferenceWithSpecPlusData {\r\n  componentRef: ComponentReferenceWithSpec;\r\n  data: ArrayBuffer;\r\n}\r\n\r\nconst calculateHashDigestHex = async (data: string | ArrayBuffer) => {\r\n  const dataBytes =\r\n    typeof data === \"string\" ? new TextEncoder().encode(data) : data;\r\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", dataBytes);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  const hashHex = hashArray\r\n    .map((b) => b.toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n  return hashHex;\r\n};\r\n\r\nconst storeComponentSpec = async (\r\n  digest: string,\r\n  componentSpec: ComponentSpec\r\n) => {\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n  const digestToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  await digestToComponentSpecDb.setItem(digest, componentSpec);\r\n  if (componentSpec.name !== undefined) {\r\n    await digestToComponentNameDb.setItem(digest, componentSpec.name);\r\n  }\r\n};\r\n\r\nexport const loadComponentAsRefFromText = async (\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentString =\r\n    typeof componentText === \"string\"\r\n      ? componentText\r\n      : new TextDecoder().decode(componentText);\r\n  const componentBytes =\r\n    typeof componentText === \"string\"\r\n      ? new TextEncoder().encode(componentText)\r\n      : componentText;\r\n\r\n  const loadedObj = yaml.load(componentString);\r\n  if (typeof loadedObj !== \"object\" || loadedObj === null) {\r\n    throw Error(`componentText is not a YAML-encoded object: ${loadedObj}`);\r\n  }\r\n  if (!isValidComponentSpec(loadedObj)) {\r\n    throw Error(\r\n      `componentText does not encode a valid pipeline component: ${loadedObj}`\r\n    );\r\n  }\r\n  const componentSpec: ComponentSpec = loadedObj;\r\n\r\n  const digest = await calculateHashDigestHex(componentBytes);\r\n  const componentRef: ComponentReferenceWithSpec = {\r\n    spec: componentSpec,\r\n    digest: digest,\r\n  };\r\n  const componentRefPlusData: ComponentReferenceWithSpecPlusData = {\r\n    componentRef: componentRef,\r\n    data: componentBytes,\r\n  };\r\n  return componentRefPlusData;\r\n};\r\n\r\nexport const loadComponentAsRefFromUrl = async (url: string) => {\r\n  const response = await fetch(url);\r\n  const componentData = await response.arrayBuffer();\r\n  let componentRefPlusData = await loadComponentAsRefFromText(componentData);\r\n  componentRefPlusData.componentRef.url = url;\r\n  return componentRefPlusData;\r\n};\r\n\r\nexport const storeComponentText = async (\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentBytes =\r\n    typeof componentText === \"string\"\r\n      ? new TextEncoder().encode(componentText)\r\n      : componentText;\r\n  const componentRefPlusData = await loadComponentAsRefFromText(componentText);\r\n  const digestToComponentTextDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_DATA_DB_TABLE_NAME,\r\n  });\r\n  const componentRef = componentRefPlusData.componentRef;\r\n  await digestToComponentTextDb.setItem(\r\n    componentRefPlusData.componentRef.digest,\r\n    componentBytes\r\n  );\r\n  await storeComponentSpec(componentRef.digest, componentRef.spec);\r\n\r\n  return componentRefPlusData;\r\n};\r\n\r\nexport const getAllComponentsAsRefs = async () => {\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n\r\n  // TODO: Rewrite as async generator\r\n  let digestToComponentRef = new Map<string, ComponentReferenceWithSpec>();\r\n  await digestToComponentSpecDb.iterate<ComponentSpec, void>(\r\n    (componentSpec, digest, iterationNumber) => {\r\n      const componentRef: ComponentReferenceWithSpec = {\r\n        spec: componentSpec,\r\n        digest: digest,\r\n      };\r\n      digestToComponentRef.set(digest, componentRef);\r\n    }\r\n  );\r\n  await addCanonicalUrlsToComponentReferences(digestToComponentRef);\r\n\r\n  const componentRefs = Array.from(digestToComponentRef.values());\r\n  return componentRefs;\r\n};\r\n\r\nconst addCanonicalUrlsToComponentReferences = async (\r\n  digestToComponentRef: Map<string, ComponentReference>\r\n) => {\r\n  const digestToCanonicalUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME,\r\n  });\r\n  await digestToCanonicalUrlDb.iterate<string, void>(\r\n    (url, digest, iterationNumber) => {\r\n      let componentRef = digestToComponentRef.get(digest);\r\n      if (componentRef === undefined) {\r\n        console.error(\r\n          `Component db corrupted: Component with url ${url} and digest ${digest} has no content in the DB.`\r\n        );\r\n      } else {\r\n        componentRef.url = url;\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nexport const searchComponentsByName = async (name: string) => {\r\n  const componentRefs = await getAllComponentsAsRefs();\r\n  return componentRefs.filter(\r\n    (ref) => ref.spec.name?.toLowerCase().includes(name.toLowerCase()) ?? false\r\n  );\r\n};\r\n\r\nexport const storeComponentFromUrl = async (\r\n  url: string,\r\n  setUrlAsCanonical = false\r\n) => {\r\n  const urlToDigestDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_DIGEST_DB_TABLE_NAME,\r\n  });\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n  const digestToDataDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_DATA_DB_TABLE_NAME,\r\n  });\r\n\r\n  const existingDigest = await urlToDigestDb.getItem<string>(url);\r\n  if (existingDigest !== null) {\r\n    const componentSpec = await digestToComponentSpecDb.getItem<ComponentSpec>(\r\n      existingDigest\r\n    );\r\n    const componentData = await digestToDataDb.getItem<ArrayBuffer>(\r\n      existingDigest\r\n    );\r\n    if (componentSpec !== null && componentData !== null) {\r\n      const componentRef: ComponentReferenceWithSpec = {\r\n        url: url,\r\n        digest: existingDigest,\r\n        spec: componentSpec,\r\n      };\r\n      const componentRefPlusData: ComponentReferenceWithSpecPlusData = {\r\n        componentRef: componentRef,\r\n        data: componentData,\r\n      };\r\n      return componentRefPlusData;\r\n    } else {\r\n      console.error(\r\n        `Component db is corrupted: Component with url ${url} was added before with digest ${existingDigest} but now has no content in the DB.`\r\n      );\r\n    }\r\n  }\r\n\r\n  const response = await fetch(url);\r\n  const componentData = await response.arrayBuffer();\r\n  let componentRefPlusData = await storeComponentText(componentData);\r\n  let componentRef = componentRefPlusData.componentRef;\r\n  componentRef.url = url;\r\n  const digest = componentRef.digest;\r\n  if (digest === undefined) {\r\n    console.error(\r\n      `Cannot happen: storeComponentText has returned componentReference with digest === undefined.`\r\n    );\r\n    return componentRefPlusData;\r\n  }\r\n  if (existingDigest !== null && digest !== existingDigest) {\r\n    console.error(\r\n      `Component db is corrupted: Component with url ${url} previously had digest ${existingDigest} but now has digest ${digest}.`\r\n    );\r\n  }\r\n  const digestToCanonicalUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME,\r\n  });\r\n  const existingCanonicalUrl = await digestToCanonicalUrlDb.getItem<string>(\r\n    digest\r\n  );\r\n  if (existingCanonicalUrl === null) {\r\n    await digestToCanonicalUrlDb.setItem(digest, url);\r\n  } else {\r\n    if (url !== existingCanonicalUrl) {\r\n      console.debug(\r\n        `The component with digest \"${digest}\" is being loaded from \"${url}\", but was previously loaded from \"${existingCanonicalUrl}\".` +\r\n          (setUrlAsCanonical ? \" Changing the canonical url.\" : \"\")\r\n      );\r\n      if (setUrlAsCanonical) {\r\n        await digestToCanonicalUrlDb.setItem(digest, url);\r\n      }\r\n    }\r\n  }\r\n  // Updating the urlToDigestDb last, because it's used to check for cached entries.\r\n  // So we need to be sure that everything has been updated correctly.\r\n  await urlToDigestDb.setItem(url, digest);\r\n  return componentRefPlusData;\r\n};\r\n\r\ninterface ComponentFileEntryV2 {\r\n  componentRef: ComponentReferenceWithSpec;\r\n}\r\n\r\ninterface FileEntry {\r\n  name: string;\r\n  creationTime: Date;\r\n  modificationTime: Date;\r\n  data: ArrayBuffer;\r\n}\r\n\r\ninterface ComponentFileEntryV3\r\n  extends FileEntry,\r\n    ComponentReferenceWithSpecPlusData {}\r\n\r\nexport type ComponentFileEntry = ComponentFileEntryV3;\r\n\r\nconst makeNameUniqueByAddingIndex = (\r\n  name: string,\r\n  existingNames: Set<string>\r\n): string => {\r\n  let finalName = name;\r\n  let index = 1;\r\n  while (existingNames.has(finalName)) {\r\n    index++;\r\n    finalName = name + \" \" + index.toString();\r\n  }\r\n  return finalName;\r\n};\r\n\r\nconst writeComponentRefPlusDataToFile = async (\r\n  listName: string,\r\n  fileName: string,\r\n  componentRefPlusData: ComponentReferenceWithSpecPlusData\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  const existingFile = await componentListDb.getItem<ComponentFileEntry>(\r\n    fileName\r\n  );\r\n  const currentTime = new Date();\r\n  let fileEntry: ComponentFileEntry;\r\n  if (existingFile === null) {\r\n    fileEntry = {\r\n      componentRef: componentRefPlusData.componentRef,\r\n      name: fileName,\r\n      creationTime: currentTime,\r\n      modificationTime: currentTime,\r\n      data: componentRefPlusData.data,\r\n    };\r\n  } else {\r\n    fileEntry = {\r\n      ...existingFile,\r\n      name: fileName,\r\n      modificationTime: currentTime,\r\n      data: componentRefPlusData.data,\r\n      componentRef: componentRefPlusData.componentRef,\r\n    };\r\n  }\r\n  await componentListDb.setItem(fileName, fileEntry);\r\n  return fileEntry;\r\n};\r\n\r\nconst addComponentRefPlusDataToList = async (\r\n  listName: string,\r\n  componentRefPlusData: ComponentReferenceWithSpecPlusData,\r\n  fileName: string = \"Component\"\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  const existingNames = new Set<string>(await componentListDb.keys());\r\n  const uniqueFileName = makeNameUniqueByAddingIndex(fileName, existingNames);\r\n  return writeComponentRefPlusDataToFile(\r\n    listName,\r\n    uniqueFileName,\r\n    componentRefPlusData\r\n  );\r\n};\r\n\r\nexport const addComponentToListByUrl = async (\r\n  listName: string,\r\n  url: string,\r\n  defaultFileName: string = \"Component\"\r\n) => {\r\n  const componentRefPlusData = await storeComponentFromUrl(url);\r\n  return addComponentRefPlusDataToList(\r\n    listName,\r\n    componentRefPlusData,\r\n    componentRefPlusData.componentRef.spec.name ?? defaultFileName\r\n  );\r\n};\r\n\r\nexport const addComponentToListByText = async (\r\n  listName: string,\r\n  componentText: string | ArrayBuffer,\r\n  fileName?: string,\r\n  defaultFileName: string = \"Component\"\r\n) => {\r\n  const componentRefPlusData = await storeComponentText(componentText);\r\n  return addComponentRefPlusDataToList(\r\n    listName,\r\n    componentRefPlusData,\r\n    fileName ?? componentRefPlusData.componentRef.spec.name ?? defaultFileName\r\n  );\r\n};\r\n\r\nexport const writeComponentToFileListFromText = async (\r\n  listName: string,\r\n  fileName: string,\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentRefPlusData = await storeComponentText(componentText);\r\n  return writeComponentRefPlusDataToFile(\r\n    listName,\r\n    fileName,\r\n    componentRefPlusData\r\n  );\r\n};\r\n\r\nexport const getAllComponentsFromList = async (listName: string) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  let componentRefs: ComponentReferenceWithSpec[] = [];\r\n  await componentListDb.iterate<ComponentFileEntry, void>(\r\n    (fileEntry, fileName, iterationNumber) => {\r\n      componentRefs.push(fileEntry.componentRef);\r\n    }\r\n  );\r\n  return componentRefs;\r\n};\r\n\r\nexport const getAllComponentFilesFromList = async (listName: string) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  let componentFiles = new Map<string, ComponentFileEntry>();\r\n  await componentListDb.iterate<ComponentFileEntry, void>(\r\n    (fileEntry, fileName, iterationNumber) => {\r\n      componentFiles.set(fileName, fileEntry);\r\n    }\r\n  );\r\n  return componentFiles;\r\n};\r\n\r\nexport const getComponentFileFromList = async (\r\n  listName: string,\r\n  fileName: string\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  return componentListDb.getItem<ComponentFileEntry>(fileName);\r\n};\r\n\r\nexport const deleteComponentFileFromList = async (\r\n  listName: string,\r\n  fileName: string\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  return componentListDb.removeItem(fileName);\r\n};\r\n\r\nexport const unsafeWriteFilesToList = async (listName: string, files: ComponentFileEntry[]) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  for (const file of files) {\r\n    await componentListDb.setItem(file.name, file);\r\n  }\r\n};\r\n\r\nexport const componentSpecToYaml = (componentSpec: ComponentSpec) => {\r\n  return yaml.dump(componentSpec, { lineWidth: 10000 });\r\n};\r\n\r\n// TODO: Remove the upgrade code in several weeks.\r\nconst upgradeSingleComponentListDb = async (listName: string) => {\r\n  const componentListVersionKey = \"component_list_format_version_\" + listName;\r\n  const componentStoreSettingsDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: COMPONENT_STORE_SETTINGS_DB_TABLE_NAME,\r\n  });\r\n  const componentListTableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: componentListTableName,\r\n  });\r\n  let listFormatVersion =\r\n    (await componentStoreSettingsDb.getItem<number>(componentListVersionKey)) ??\r\n    1;\r\n  if (![1, 2, 3].includes(listFormatVersion)) {\r\n    throw Error(\r\n      `upgradeComponentListDb: Unknown component list version \"${listFormatVersion}\" for the list ${listName}`\r\n    );\r\n  }\r\n  if (listFormatVersion === 1) {\r\n    console.log(`componentStore: Upgrading the component list DB ${listName}`);\r\n    const componentRefListsDb = localForage.createInstance({\r\n      name: DB_NAME,\r\n      storeName: COMPONENT_REF_LISTS_DB_TABLE_NAME,\r\n    });\r\n    const componentRefList: ComponentReferenceWithSpec[] =\r\n      (await componentRefListsDb.getItem(listName)) ?? [];\r\n\r\n    let existingNames = new Set<string>();\r\n    const emptyNameReplacement =\r\n      listName === \"user_pipelines\" ? \"Pipeline\" : \"Component\";\r\n    for (const componentRef of componentRefList) {\r\n      const fileName = componentRef.spec.name ?? emptyNameReplacement;\r\n      const uniqueFileName = makeNameUniqueByAddingIndex(\r\n        fileName,\r\n        existingNames\r\n      );\r\n      const fileEntry: ComponentFileEntryV2 = {\r\n        componentRef: componentRef,\r\n      };\r\n      await componentListDb.setItem(uniqueFileName, fileEntry);\r\n      existingNames.add(uniqueFileName);\r\n    }\r\n    await componentStoreSettingsDb.setItem(componentListVersionKey, 2);\r\n    listFormatVersion = 2;\r\n    console.log(\r\n      `componentStore: Upgraded the component list DB ${listName} to version ${listFormatVersion}`\r\n    );\r\n  }\r\n  if (listFormatVersion === 2) {\r\n    const digestToDataDb = localForage.createInstance({\r\n      name: DB_NAME,\r\n      storeName: DIGEST_TO_DATA_DB_TABLE_NAME,\r\n    });\r\n    const fileNames = await componentListDb.keys();\r\n    for (const fileName of fileNames) {\r\n      const fileEntry = await componentListDb.getItem<ComponentFileEntryV2>(\r\n        fileName\r\n      );\r\n      if (fileEntry === null) {\r\n        throw Error(`File \"${fileName}\" has disappeared during upgrade`);\r\n      }\r\n      let componentRef = fileEntry.componentRef;\r\n      let data = await digestToDataDb.getItem<ArrayBuffer>(\r\n        fileEntry.componentRef.digest\r\n      );\r\n      if (data === null) {\r\n        console.error(\r\n          `Db is corrupted: Could not find data for file \"${fileName}\" with digest ${fileEntry.componentRef.digest}.`\r\n        );\r\n        const componentText = componentSpecToYaml(fileEntry.componentRef.spec);\r\n        data = new TextEncoder().encode(componentText);\r\n        const newDigest = await calculateHashDigestHex(data);\r\n        componentRef.digest = newDigest;\r\n        console.warn(\r\n          `The component \"${fileName}\" was re-serialized. Old digest: ${fileEntry.componentRef.digest}. New digest ${newDigest}.`\r\n        );\r\n        // This case should not happen. Let's throw error for now.\r\n        throw Error(\r\n          `Db is corrupted: Could not find data for file \"${fileName}\" with digest ${fileEntry.componentRef.digest}.`\r\n        );\r\n      }\r\n      const currentTime = new Date();\r\n      const newFileEntry: ComponentFileEntryV3 = {\r\n        name: fileName,\r\n        creationTime: currentTime,\r\n        modificationTime: currentTime,\r\n        data: data,\r\n        componentRef: componentRef,\r\n      };\r\n      await componentListDb.setItem(fileName, newFileEntry);\r\n    }\r\n    listFormatVersion = 3;\r\n    await componentStoreSettingsDb.setItem(\r\n      componentListVersionKey,\r\n      listFormatVersion\r\n    );\r\n    console.log(\r\n      `componentStore: Upgraded the component list DB ${listName} to version ${listFormatVersion}`\r\n    );\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nexport type MySchema = ComponentSpec;\r\nexport type TypeSpecType =\r\n  | string\r\n  | {\r\n      [k: string]: TypeSpecType;\r\n    };\r\nexport interface InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the component input specification\r\n */\r\nexport interface InputSpec extends InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  default?: string;\r\n  optional?: boolean;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the component output specification\r\n */\r\nexport interface OutputSpec extends InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by the input argument value.\r\n */\r\nexport interface InputValuePlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  inputValue: string;\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a local file path pointing to a file containing the input argument value.\r\n */\r\nexport interface InputPathPlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  inputPath: string;\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a local file path pointing to a file where the program should write its output data.\r\n */\r\nexport interface OutputPathPlaceholder {\r\n  /**\r\n   * Name of the output.\r\n   */\r\n  outputPath: string;\r\n}\r\nexport type StringOrPlaceholder =\r\n  | string\r\n  | InputValuePlaceholder\r\n  | InputPathPlaceholder\r\n  | OutputPathPlaceholder\r\n  | ConcatPlaceholder\r\n  | IfPlaceholder;\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by the concatenated values of its items.\r\n */\r\nexport interface ConcatPlaceholder {\r\n  /**\r\n   * Items to concatenate\r\n   */\r\n  concat: StringOrPlaceholder[];\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a boolean value specifying whether the caller has passed an argument for the specified optional input.\r\n */\r\nexport interface IsPresentPlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  isPresent: string;\r\n}\r\nexport type IfConditionArgumentType =\r\n  | IsPresentPlaceholder\r\n  | boolean\r\n  | string\r\n  | InputValuePlaceholder;\r\nexport type ListOfStringsOrPlaceholders = StringOrPlaceholder[];\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a boolean value specifying whether the caller has passed an argument for the specified optional input.\r\n */\r\nexport interface IfPlaceholder {\r\n  if: {\r\n    cond: IfConditionArgumentType;\r\n    then: ListOfStringsOrPlaceholders;\r\n    else?: ListOfStringsOrPlaceholders;\r\n  };\r\n}\r\nexport interface ContainerSpec {\r\n  /**\r\n   * Docker image name.\r\n   */\r\n  image: string;\r\n  /**\r\n   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.\r\n   */\r\n  command?: StringOrPlaceholder[];\r\n  /**\r\n   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided.\r\n   */\r\n  args?: StringOrPlaceholder[];\r\n  /**\r\n   * List of environment variables to set in the container.\r\n   */\r\n  env?: {\r\n    [k: string]: StringOrPlaceholder;\r\n  };\r\n}\r\n/**\r\n * Represents the container component implementation.\r\n */\r\nexport interface ContainerImplementation {\r\n  container: ContainerSpec;\r\n}\r\nexport type ImplementationType = ContainerImplementation | GraphImplementation;\r\nexport interface MetadataSpec {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Component specification. Describes the metadata (name, description, source), the interface (inputs and outputs) and the implementation of the component.\r\n */\r\nexport interface ComponentSpec {\r\n  name?: string;\r\n  description?: string;\r\n  inputs?: InputSpec[];\r\n  outputs?: OutputSpec[];\r\n  implementation: ImplementationType;\r\n  metadata?: MetadataSpec;\r\n}\r\n/**\r\n * Component reference. Contains information that can be used to locate and load a component by name, digest or URL\r\n */\r\nexport interface ComponentReference {\r\n  name?: string;\r\n  digest?: string;\r\n  tag?: string;\r\n  url?: string;\r\n  spec?: ComponentSpec;\r\n}\r\n/**\r\n * Represents the component argument value that comes from the graph component input.\r\n */\r\nexport interface GraphInputArgument {\r\n  /**\r\n   * References the input of the graph/pipeline.\r\n   */\r\n  graphInput: {\r\n    inputName: string;\r\n    type?: TypeSpecType;\r\n  };\r\n}\r\n/**\r\n * Represents the component argument value that comes from the output of a sibling task.\r\n */\r\nexport interface TaskOutputArgument {\r\n  /**\r\n   * References the output of a sibling task.\r\n   */\r\n  taskOutput: {\r\n    taskId: string;\r\n    outputName: string;\r\n    type?: TypeSpecType;\r\n  };\r\n}\r\nexport type ArgumentType = string | GraphInputArgument | TaskOutputArgument;\r\n/**\r\n * Pair of operands for a binary operation.\r\n */\r\nexport interface TwoArgumentOperands {\r\n  op1: ArgumentType;\r\n  op2: ArgumentType;\r\n}\r\n/**\r\n * Pair of operands for a binary logical operation.\r\n */\r\nexport interface TwoLogicalOperands {\r\n  op1: PredicateType;\r\n  op2: PredicateType;\r\n}\r\n/**\r\n * Optional configuration that specifies how the task should be executed. Can be used to set some platform-specific options.\r\n */\r\nexport type PredicateType =\r\n  | {\r\n      \"==\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"!=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \">\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \">=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"<\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"<=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      and: TwoLogicalOperands;\r\n    }\r\n  | {\r\n      or: TwoLogicalOperands;\r\n    }\r\n  | {\r\n      not: PredicateType;\r\n    };\r\n\r\n/**\r\n * Optional configuration that specifies how the task should be retried if it fails.\r\n */\r\nexport interface RetryStrategySpec {\r\n  maxRetries?: number;\r\n}\r\n/**\r\n * Optional configuration that specifies how the task execution may be skipped if the output data exist in cache.\r\n */\r\nexport interface CachingStrategySpec {\r\n  maxCacheStaleness?: string;\r\n}\r\n\r\nexport interface ExecutionOptionsSpec {\r\n  retryStrategy?: RetryStrategySpec;\r\n  cachingStrategy?: CachingStrategySpec;\r\n}\r\n/**\r\n * 'Task specification. Task is a configured component - a component supplied with arguments and other applied configuration changes.\r\n */\r\nexport interface TaskSpec {\r\n  componentRef: ComponentReference;\r\n  arguments?: {\r\n    [k: string]: ArgumentType;\r\n  };\r\n  isEnabled?: PredicateType;\r\n  executionOptions?: ExecutionOptionsSpec;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the graph component implementation. It represents a graph of component tasks connected to the upstream sources of data using the argument specifications. It also describes the sources of graph output values.\r\n */\r\nexport interface GraphSpec {\r\n  tasks: {\r\n    [k: string]: TaskSpec;\r\n  };\r\n  outputValues?: {\r\n    [k: string]: TaskOutputArgument;\r\n  };\r\n}\r\n/**\r\n * Represents the graph component implementation.\r\n */\r\nexport interface GraphImplementation {\r\n  graph: GraphSpec;\r\n}\r\n\r\n// Type guards\r\nexport const isValidComponentSpec = (obj: any): obj is ComponentSpec =>\r\n  typeof obj === \"object\" && \"implementation\" in obj;\r\n\r\nexport const isContainerImplementation = (\r\n  implementation: ImplementationType\r\n): implementation is ContainerImplementation => \"container\" in implementation;\r\n\r\nexport const isGraphImplementation = (\r\n  implementation: ImplementationType\r\n): implementation is GraphImplementation => \"graph\" in implementation;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useState } from \"react\";\r\nimport { ArgumentType, TaskSpec } from \"../componentSpec\";\r\nimport ArgumentsEditor from \"./ArgumentsEditor\";\r\n\r\ninterface ArgumentsEditorDialogProps {\r\n  taskSpec: TaskSpec;\r\n  closeEditor?: () => void;\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n}\r\n\r\nconst ArgumentsEditorDialog = ({\r\n  taskSpec,\r\n  closeEditor,\r\n  setArguments,\r\n}: ArgumentsEditorDialogProps) => {\r\n  const [currentArguments, setCurrentArguments] = useState<\r\n    Record<string, ArgumentType>\r\n  >({ ...taskSpec.arguments });\r\n\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    console.error(\r\n      \"ArgumentsEditor called with missing taskSpec.componentRef.spec\",\r\n      taskSpec\r\n    );\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // Does not work\r\n      // draggable={false}\r\n      style={{\r\n        position: \"fixed\",\r\n        background: \"white\",\r\n        border: \"1px solid black\",\r\n        borderRadius: \"4px\",\r\n        padding: \"15px\",\r\n        // Does not work\r\n        // zIndex: 11,\r\n      }}\r\n    >\r\n      <legend>Input arguments for {componentSpec.name}</legend>\r\n      <ArgumentsEditor\r\n        componentSpec={componentSpec}\r\n        componentArguments={currentArguments}\r\n        setComponentArguments={setCurrentArguments}\r\n      />\r\n      <button type=\"button\" onClick={closeEditor}>\r\n        Close\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          setArguments?.(currentArguments);\r\n          closeEditor?.();\r\n        }}\r\n      >\r\n        Apply\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ArgumentsEditorDialog;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { CSSProperties, memo, useState } from 'react';\r\nimport {\r\n  ArgumentType,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskSpec,\r\n} from '../componentSpec';\r\n\r\nimport { Handle, Position, Node, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nimport ArgumentsEditorDialog from './ArgumentsEditorDialog';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nconst MISSING_ARGUMENT_CLASS_NAME = \"missing-argument\";\r\n\r\nconst NODE_WIDTH_IN_PX = 180;\r\n\r\nexport const isComponentTaskNode = (node: Node): node is Node<ComponentTaskNodeProps> =>\r\n  node.type === \"task\" && node.data !== undefined && \"taskSpec\" in node.data;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n  inputsWithMissingArguments?: string[],\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    // TODO: Handle complex type specs\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    let classNames = [`handle_${idPrefix}${ioTypeName}`.replace(\" \", \"_\")];\r\n    const isInvalid = (inputsWithMissingArguments ?? []).includes(ioSpec.name);\r\n    if (isInvalid) {\r\n      classNames.push(MISSING_ARGUMENT_CLASS_NAME);\r\n    }\r\n    classNames = classNames.map((className) => className.replace(\" \", \"_\"));\r\n\r\n    const [labelClasses, labelStyle] = generateLabelStyle(position, numHandles);\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={classNames.join(\" \")}\r\n      >\r\n        <div className={labelClasses} style={labelStyle}>\r\n          {ioSpec.name}\r\n        </div>\r\n      </Handle>\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\n\r\nfunction generateLabelStyle(\r\n  position: Position,\r\n  numHandles: number\r\n): [string, CSSProperties] {\r\n  let maxLabelWidthPx = NODE_WIDTH_IN_PX;\r\n  // By default, we want to place the label on the same side of the handle as the handle is on the side of the node.\r\n  let labelClasses = \"label\";\r\n  // When there are too many inputs/outputs, we need to move the label so it starts from the handle.\r\n  // Based on my tests, we always want this for >4 handles (top/bottom), so the rotated default placement is never used at all.\r\n\r\n  if (position === Position.Top || position === Position.Bottom) {\r\n    if (numHandles > 1) {\r\n      // For single handle max width is the node width, while the formula would give half of that\r\n      maxLabelWidthPx = NODE_WIDTH_IN_PX / (numHandles + 1);\r\n    }\r\n    //if (numHandles > 4) {\r\n    if (maxLabelWidthPx < 35) {\r\n      maxLabelWidthPx = 50;\r\n      labelClasses += \" label-angled\";\r\n    }\r\n  } else {\r\n    maxLabelWidthPx = 60;\r\n  }\r\n\r\n  const labelStyle: CSSProperties = { maxWidth: `${maxLabelWidthPx}px` };\r\n  return [labelClasses, labelStyle];\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[], inputsWithInvalidArguments?: string[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\", inputsWithInvalidArguments);\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nexport interface ComponentTaskNodeProps {\r\n  taskSpec: TaskSpec,\r\n  taskId?: string,\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n};\r\n\r\nconst ComponentTaskNode = ({ data }: NodeProps<ComponentTaskNodeProps>) => {\r\n  const [isArgumentsEditorOpen, setIsArgumentsEditorOpen] = useState(false);\r\n\r\n  const taskSpec = data.taskSpec;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputsWithInvalidArguments = (componentSpec.inputs ?? [])\r\n    .filter(\r\n      (inputSpec) =>\r\n        inputSpec.optional !== true &&\r\n        inputSpec.default === undefined &&\r\n        !(inputSpec.name in (taskSpec.arguments ?? {}))\r\n    )\r\n    .map((inputSpec) => inputSpec.name);\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? [], inputsWithInvalidArguments);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  const closeArgumentsEditor = () => {\r\n    setIsArgumentsEditorOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setIsArgumentsEditorOpen(!isArgumentsEditorOpen);\r\n      }}\r\n      title={data.taskId}\r\n    >\r\n      {label}\r\n      {handleComponents}\r\n      {isArgumentsEditorOpen && (\r\n        <ArgumentsEditorDialog\r\n          taskSpec={taskSpec}\r\n          closeEditor={closeArgumentsEditor}\r\n          setArguments={data.setArguments}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport React, { DragEvent, useState } from \"react\";\r\nimport ReactFlow, {\r\n  ArrowHeadType,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Elements,\r\n  isEdge,\r\n  isNode,\r\n  Node,\r\n  OnLoadParams,\r\n  ReactFlowProps,\r\n  XYPosition,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  GraphInputArgument,\r\n  GraphSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskOutputArgument,\r\n  TaskSpec,\r\n  isGraphImplementation,\r\n} from \"../componentSpec\";\r\nimport ComponentTaskNode, { ComponentTaskNodeProps, isComponentTaskNode } from \"./ComponentTaskNode\";\r\n\r\n\r\nconst NODE_LAYOUT_ANNOTATION_KEY = \"editor.position\";\r\nconst SDK_ANNOTATION_KEY = \"sdk\";\r\nconst SDK_ANNOTATION_VALUE = \"https://cloud-pipelines.net/pipeline-editor/\";\r\n\r\nconst taskIdToNodeId = (id: string) => \"task_\" + id;\r\nconst inputNameToNodeId = (name: string) => \"input_\" + name;\r\nconst outputNameToNodeId = (name: string) => \"output_\" + name;\r\n\r\nconst nodeIdToTaskId = (id: string) => id.replace(/^task_/, \"\");\r\nconst nodeIdToInputName = (id: string) => id.replace(/^input_/, \"\");\r\nconst nodeIdToOutputName = (id: string) => id.replace(/^output_/, \"\");\r\n\r\nexport const augmentComponentSpec = (\r\n  componentSpec: ComponentSpec,\r\n  nodes: Node[],\r\n  includeSpecs = false,\r\n  includePositions = true\r\n) => {\r\n  componentSpec = { ...componentSpec };\r\n\r\n  const getNodePositionAnnotation = (node: Node) =>\r\n    JSON.stringify({\r\n      // node.position cannot be used since set at 1st drop and never updated\r\n      x: node.__rf.position.x,\r\n      y: node.__rf.position.y,\r\n      width: node.__rf.width,\r\n      height: node.__rf.height,\r\n    });\r\n\r\n  const nodeXPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaX !== 0 ? deltaX : deltaY;\r\n  };\r\n  const nodeYPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaY !== 0 ? deltaY : deltaX;\r\n  };\r\n\r\n  // Input and output nodes\r\n  // Sorting them by horizontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes\r\n    .filter((node) => node.type === \"input\")\r\n    .sort(nodeXPositionComparer);\r\n  const outputNodes = nodes\r\n    .filter((node) => node.type === \"output\")\r\n    .sort(nodeXPositionComparer);\r\n  const taskNodes = nodes\r\n    .filter(isComponentTaskNode)\r\n    .sort(nodeYPositionComparer);\r\n\r\n  const inputPositionMap = new Map<string, string>(\r\n    inputNodes.map((node) => [\r\n      nodeIdToInputName(node.id),\r\n      getNodePositionAnnotation(node),\r\n    ])\r\n  );\r\n  const inputOrderMap = new Map<string, number>(\r\n    inputNodes.map((node, index) => [nodeIdToInputName(node.id), index])\r\n  );\r\n  const inputOrderComparer = (a: InputSpec, b: InputSpec) =>\r\n    (inputOrderMap.get(a.name) ?? Infinity) -\r\n    (inputOrderMap.get(b.name) ?? Infinity);\r\n  const outputPositionMap = new Map<string, string>(\r\n    outputNodes.map((node) => [\r\n      nodeIdToOutputName(node.id),\r\n      getNodePositionAnnotation(node),\r\n    ])\r\n  );\r\n  const outputOrderMap = new Map<string, number>(\r\n    outputNodes.map((node, index) => [nodeIdToOutputName(node.id), index])\r\n  );\r\n  const outputOrderComparer = (a: OutputSpec, b: OutputSpec) =>\r\n    (outputOrderMap.get(a.name) ?? Infinity) -\r\n    (outputOrderMap.get(b.name) ?? Infinity);\r\n  const taskPositionMap = new Map<string, string>(\r\n    taskNodes.map((node) => [\r\n      nodeIdToTaskId(node.id),\r\n      getNodePositionAnnotation(node),\r\n    ])\r\n  );\r\n  const taskOrderMap = new Map<string, number>(\r\n    taskNodes.map((node, index) => [nodeIdToTaskId(node.id), index])\r\n  );\r\n  const taskOrderComparer = (\r\n    pairA: [string, TaskSpec],\r\n    pairB: [string, TaskSpec]\r\n  ) =>\r\n    (taskOrderMap.get(pairA[0]) ?? Infinity) -\r\n    (taskOrderMap.get(pairB[0]) ?? Infinity);\r\n\r\n  componentSpec.inputs = componentSpec.inputs\r\n    ?.map((inputSpec) => {\r\n      if (!inputPositionMap.has(inputSpec.name) || !inputOrderMap.has(inputSpec.name)) {\r\n        throw Error(`The nodes array does not have input node ${inputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...inputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = inputPositionMap.get(\r\n          inputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newInputSpec: InputSpec = {\r\n        ...inputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (Object.keys(newAnnotations).length === 0) {\r\n        delete newInputSpec.annotations;\r\n      }\r\n      return newInputSpec;\r\n    })\r\n    .sort(inputOrderComparer);\r\n\r\n  componentSpec.outputs = componentSpec.outputs\r\n    ?.map((outputSpec) => {\r\n      if (!outputPositionMap.has(outputSpec.name) || !outputOrderMap.has(outputSpec.name)) {\r\n        throw Error(`The nodes array does not have output node ${outputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...outputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = outputPositionMap.get(\r\n          outputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newOutputSpec: OutputSpec = {\r\n        ...outputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (\r\n        newAnnotations === undefined ||\r\n        Object.keys(newAnnotations).length === 0\r\n      ) {\r\n        delete newOutputSpec.annotations;\r\n      }\r\n      return newOutputSpec;\r\n    })\r\n    .sort(outputOrderComparer);\r\n\r\n  if (!isGraphImplementation(componentSpec.implementation)) {\r\n    return componentSpec;\r\n  }\r\n\r\n  let graphSpec: GraphSpec = { ...componentSpec.implementation.graph };\r\n  const newTasks = Object.fromEntries(\r\n    Object.entries(graphSpec.tasks || {})\r\n      .map(([taskId, taskSpec]) => {\r\n        if (!taskPositionMap.has(taskId) || !taskOrderMap.has(taskId)) {\r\n          throw Error(`The nodes array does not have task node ${taskId}`);\r\n        }\r\n        let newAnnotations = { ...taskSpec.annotations };\r\n        if (includePositions) {\r\n          newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] =\r\n            taskPositionMap.get(taskId);\r\n        } else {\r\n          delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n        }\r\n        let newTaskSpec: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: newAnnotations,\r\n        };\r\n        if (\r\n          newAnnotations === undefined ||\r\n          Object.keys(newAnnotations).length === 0\r\n        ) {\r\n          delete newTaskSpec.annotations;\r\n        }\r\n        // TODO: Sort the arguments based on the ordering of the component inputs.\r\n        if (\r\n          !includeSpecs &&\r\n          newTaskSpec.componentRef.spec !== undefined &&\r\n          newTaskSpec.componentRef.url !== undefined\r\n        ) {\r\n          newTaskSpec.componentRef = { ...newTaskSpec.componentRef };\r\n          delete newTaskSpec.componentRef.spec;\r\n        }\r\n        return [taskId, newTaskSpec] as [string, TaskSpec];\r\n      })\r\n      .sort(taskOrderComparer)\r\n  );\r\n  if (newTasks !== undefined) {\r\n    graphSpec.tasks = newTasks;\r\n  }\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    implementation: { ...componentSpec.implementation, graph: graphSpec },\r\n  };\r\n\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    metadata: {\r\n      ...componentSpec.metadata,\r\n      annotations: {\r\n        ...componentSpec.metadata?.annotations,\r\n        [SDK_ANNOTATION_KEY]: SDK_ANNOTATION_VALUE\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reordering the attributes and removing the undefined ones\r\n  const rebuildComponentSpec = ({\r\n    name,\r\n    description,\r\n    metadata,\r\n    inputs,\r\n    outputs,\r\n    implementation,\r\n    ...rest\r\n  }: ComponentSpec): ComponentSpec => ({\r\n    ...(name && { name: name }),\r\n    ...(description && { description: description }),\r\n    ...(metadata && { metadata: metadata }),\r\n    ...(inputs && { inputs: inputs }),\r\n    ...(outputs && { outputs: outputs }),\r\n    implementation: implementation,\r\n    ...rest,\r\n  });\r\n  componentSpec = rebuildComponentSpec(componentSpec);\r\n\r\n  return componentSpec;\r\n};\r\n\r\nexport interface GraphComponentSpecFlowProps\r\n  extends Omit<ReactFlowProps, \"elements\"> {\r\n  componentSpec: ComponentSpec,\r\n  setComponentSpec: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst nodeTypes = {\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst GraphComponentSpecFlow = ({\r\n  children,\r\n  componentSpec = { implementation: { graph: { tasks: {} } } },\r\n  setComponentSpec,\r\n  ...rest\r\n}: GraphComponentSpecFlowProps) => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n\r\n  if (! ('graph' in componentSpec.implementation)) {\r\n    // Only graph components are supported\r\n    return <></>;\r\n  }\r\n  let graphSpec = componentSpec.implementation.graph;\r\n\r\n  const nodes = Object.entries(graphSpec.tasks).map<Node<ComponentTaskNodeProps>>(\r\n    ([taskId, taskSpec]) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (taskSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = taskSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n\r\n      return {\r\n        id: taskIdToNodeId(taskId),\r\n        data: {\r\n          taskSpec: taskSpec,\r\n          taskId: taskId,\r\n          setArguments: (args) => setTaskArguments(taskId, args),\r\n        },\r\n        position: position,\r\n        type: \"task\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const inputNodes = (componentSpec.inputs ?? []).map<Node>(\r\n    (inputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (inputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = inputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: inputNameToNodeId(inputSpec.name),\r\n        data: { label: inputSpec.name },\r\n        position: position,\r\n        type: \"input\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const outputNodes = (componentSpec.outputs ?? []).map<Node>(\r\n    (outputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (outputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = outputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: outputNameToNodeId(outputSpec.name),\r\n        data: { label: outputSpec.name },\r\n        position: position,\r\n        type: \"output\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const edges: Edge[] = Object.entries(graphSpec.tasks).flatMap(\r\n    ([taskId, taskSpec]) => {\r\n      return Object.entries(taskSpec.arguments ?? {}).flatMap(\r\n        ([inputName, argument]) => {\r\n          if (typeof argument === \"string\") {\r\n            return [];\r\n          }\r\n          if (\"taskOutput\" in argument) {\r\n            const taskOutput = argument.taskOutput;\r\n            const edge: Edge = {\r\n              id: `${taskOutput.taskId}_${taskOutput.outputName}-${taskId}_${inputName}`,\r\n              source: taskIdToNodeId(taskOutput.taskId),\r\n              sourceHandle: `output_${taskOutput.outputName}`,\r\n              target: taskIdToNodeId(taskId),\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else if (\"graphInput\" in argument) {\r\n            const graphInput = argument.graphInput;\r\n            const edge: Edge = {\r\n              id: `Input_${graphInput.inputName}-${taskId}_${inputName}`,\r\n              source: inputNameToNodeId(graphInput.inputName),\r\n              //sourceHandle: undefined,\r\n              //sourceHandle: \"Input\",\r\n              sourceHandle: null,\r\n              target: taskIdToNodeId(taskId),\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else {\r\n            console.error(\"Impossible task input argument kind: \", argument);\r\n            return [];\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n\r\n  const outputEdges: Edge[] = Object.entries(graphSpec.outputValues ?? {}).map(\r\n    ([outputName, argument]) => {\r\n      const taskOutput = argument.taskOutput;\r\n      const edge: Edge = {\r\n        id: `${taskOutput.taskId}_${taskOutput.outputName}-Output_${outputName}`,\r\n        source: taskIdToNodeId(taskOutput.taskId),\r\n        sourceHandle: `output_${taskOutput.outputName}`,\r\n        target: outputNameToNodeId(outputName),\r\n        //targetHandle: undefined,\r\n        //targetHandle: \"Output\",\r\n        targetHandle: null,\r\n        arrowHeadType: ArrowHeadType.ArrowClosed,\r\n      };\r\n      return edge;\r\n    }\r\n  );\r\n\r\n  const elements = (nodes as Elements).concat(inputNodes).concat(outputNodes).concat(edges).concat(outputEdges);\r\n  \r\n  const replaceComponentSpec = (newComponentSpec: ComponentSpec) => {\r\n    componentSpec = newComponentSpec;\r\n    setComponentSpec(newComponentSpec);\r\n  };\r\n\r\n  const replaceGraphSpec = (newGraphSpec: GraphSpec) => {\r\n    graphSpec = newGraphSpec;\r\n    replaceComponentSpec({ ...componentSpec, implementation: { graph: graphSpec } });\r\n  };\r\n\r\n  const setTaskArguments = (\r\n    taskId: string,\r\n    taskArguments?: Record<string, ArgumentType>,\r\n  ) => {\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    newGraphSpec.tasks[taskId] = {\r\n      ...graphSpec.tasks[taskId],\r\n      arguments: taskArguments,\r\n    };\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const setTaskArgument = (\r\n    taskId: string,\r\n    inputName: string,\r\n    argument?: ArgumentType\r\n  ) => {\r\n    const oldTaskSpec = graphSpec.tasks[taskId];\r\n    const oldTaskSpecArguments = oldTaskSpec.arguments;\r\n    let newTaskSpecArguments: Record<string, ArgumentType> = {\r\n      ...oldTaskSpecArguments,\r\n    };\r\n    if (argument === undefined) {\r\n      delete newTaskSpecArguments[inputName];\r\n    } else {\r\n      newTaskSpecArguments[inputName] = argument;\r\n    }\r\n    setTaskArguments(taskId, newTaskSpecArguments);\r\n  };\r\n\r\n  const removeTaskArgument = (taskId: string, inputName: string) =>\r\n    setTaskArgument(taskId, inputName, undefined);\r\n\r\n  const setGraphOutputValue = (\r\n    outputName: string,\r\n    outputValue?: TaskOutputArgument\r\n  ) => {\r\n    let newGraphOutputValues = { ...graphSpec.outputValues };\r\n    if (outputValue === undefined) {\r\n      delete newGraphOutputValues[outputName];\r\n    } else {\r\n      newGraphOutputValues[outputName] = outputValue;\r\n    }\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n    replaceGraphSpec(graphSpec);\r\n  };\r\n\r\n  const removeGraphOutputValue = (outputName: string) =>\r\n    setGraphOutputValue(outputName);\r\n\r\n  const addConnection = (connection: Connection | Edge) => {\r\n    if (connection.source === null || connection.target === null) {\r\n      console.error(\r\n        \"addConnection called with missing source or target: \",\r\n        connection\r\n      );\r\n      return;\r\n    }\r\n\r\n    const targetTaskInputName = connection.targetHandle?.replace(/^input_/, \"\");\r\n    const sourceTaskOutputName = connection.sourceHandle?.replace(/^output_/, \"\");\r\n\r\n    if (sourceTaskOutputName !== undefined) {\r\n      // Source is task output\r\n      const taskOutputArgument: TaskOutputArgument = {\r\n        taskOutput: {\r\n          taskId: nodeIdToTaskId(connection.source),\r\n          outputName: sourceTaskOutputName,\r\n        },\r\n      };\r\n\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          nodeIdToTaskId(connection.target),\r\n          targetTaskInputName,\r\n          taskOutputArgument\r\n        );\r\n      } else {\r\n        // Target is graph output\r\n        setGraphOutputValue(\r\n          nodeIdToOutputName(connection.target),\r\n          taskOutputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      }\r\n    } else {\r\n      // Source is graph input\r\n      const graphInputName = nodeIdToInputName(connection.source);\r\n      const graphInputArgument: GraphInputArgument = {\r\n        graphInput: {\r\n          inputName: graphInputName,\r\n        },\r\n      };\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          nodeIdToTaskId(connection.target),\r\n          targetTaskInputName,\r\n          graphInputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      } else {\r\n        // Target is graph output\r\n        console.error(\r\n          \"addConnection: Cannot directly connect graph input to graph output: \",\r\n          connection\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnect = (params: Connection | Edge) => {\r\n    addConnection(params);\r\n  };\r\n\r\n  const removeEdge = (edge: Edge) => {\r\n    const inputName = edge.targetHandle?.replace(/^input_/, \"\");\r\n\r\n    if (inputName !== undefined) {\r\n      removeTaskArgument(nodeIdToTaskId(edge.target), inputName);\r\n    } else {\r\n      removeGraphOutputValue(nodeIdToOutputName(edge.target));\r\n    }\r\n  };\r\n\r\n  const removeComponentInput = (inputNameToRemove: string) => {\r\n    // Removing the outcoming edges\r\n    // Not really needed since react-flow sends the node's incoming and outcoming edges for deletion when a node is deleted\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"graphInput\" in argument) {\r\n          if (argument.graphInput.inputName === inputNameToRemove) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Not checking the sources of graph outputs, since they cannot be directly connected to the graph inputs\r\n\r\n    // Removing the input itself\r\n    const newInputs = (componentSpec.inputs ?? []).filter(\r\n      (inputSpec) => inputSpec.name !== inputNameToRemove\r\n    );\r\n    componentSpec = { ...componentSpec, inputs: newInputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeComponentOutput = (outputNameToRemove: string) => {\r\n    removeGraphOutputValue(outputNameToRemove);\r\n    // Removing the output itself\r\n    const newOutputs = (componentSpec.outputs ?? []).filter(\r\n      (outputSpec) => outputSpec.name !== outputNameToRemove\r\n    );\r\n    componentSpec = { ...componentSpec, outputs: newOutputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeTask = (taskIdToRemove: string) => {\r\n    // Removing the outcoming edges\r\n    // Not really needed since react-flow sends the node's incoming and outcoming edges for deletion when a node is deleted\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n          if (argument.taskOutput.taskId === taskIdToRemove) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Removing outcoming edges that go to graph outputs.\r\n    // ? Should we delete the outputs themselves\r\n    const newGraphOutputValues = Object.fromEntries(\r\n      Object.entries(graphSpec.outputValues ?? {}).filter(\r\n        ([_, argument]) => argument.taskOutput.taskId !== taskIdToRemove\r\n      )\r\n    );\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n\r\n    // Removing the task\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    delete newGraphSpec.tasks[taskIdToRemove];\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const removeNode = (node: Node) => {\r\n    // TODO: Use global constants for node types\r\n    if (node.type === \"input\") {\r\n      const inputName = nodeIdToInputName(node.id);\r\n      removeComponentInput(inputName);\r\n    } else if (node.type === \"output\") {\r\n      const outputName = nodeIdToOutputName(node.id);\r\n      removeComponentOutput(outputName);\r\n    } else if (node.type === \"task\") {\r\n      const taskId = nodeIdToTaskId(node.id);\r\n      removeTask(taskId);\r\n    } else {\r\n      console.log(\"removeNode: Unexpected note type: \", node);\r\n    }\r\n  };\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => {\r\n    for (const element of elementsToRemove) {\r\n      if (isEdge(element)) {\r\n        removeEdge(element);\r\n      }\r\n    }\r\n    for (const element of elementsToRemove) {\r\n      if (isNode(element)) {\r\n        removeNode(element);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) => {\r\n    removeEdge(oldEdge);\r\n    addConnection(newConnection);\r\n  };\r\n\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const makeNameUniqueByAddingIndex = (name: string, existingNames: Set<string>): ElementId => {\r\n    let finalName = name;\r\n    let index = 1;\r\n    while (existingNames.has(finalName)) {\r\n      index++;\r\n      finalName = name + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\n  const getUniqueInputName = (name: string = \"Input\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.inputs?.map((inputSpec) => inputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueOutputName = (name: string = \"Output\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.outputs?.map((outputSpec) => outputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueTaskName = (name: string = \"Task\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(Object.keys(graphSpec.tasks))\r\n    );\r\n  };\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData(\"application/reactflow\");\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      \r\n      // Correcting the position using the drag point location information\r\n      let dragOffsetX = 0;\r\n      let dragOffsetY = 0;\r\n      const dragStartOffsetData = event.dataTransfer.getData(\"DragStart.offset\");\r\n      if (dragStartOffsetData !== \"\") {\r\n        const dragStartOffset = JSON.parse(dragStartOffsetData);\r\n        // Hack to work around Chrome's draggable anchor bug. TODO: Remove once Chrome is fixed\r\n        dragOffsetX = dragStartOffset.offsetX * 0.68 ?? 0;\r\n        dragOffsetY = dragStartOffset.offsetY * 0.64 ?? 0;\r\n      }\r\n\r\n      // Node position. Offsets should be included in projection, so that they snap to the grid.\r\n      // Otherwise the dropped nodes will be out of phase with the rest of the nodes even when snapping.\r\n      let position = reactFlowInstance.project({\r\n        x: event.clientX - dragOffsetX,\r\n        y: event.clientY - dragOffsetY,\r\n      });\r\n\r\n      const nodePosition = { x: position.x, y: position.y };\r\n      const positionAnnotations = {\r\n        \"editor.position\": JSON.stringify(nodePosition),\r\n      }\r\n      if (nodeType === \"task\") {\r\n        const taskSpec = nodeData as TaskSpec;\r\n        const mergedAnnotations = {\r\n          ...taskSpec.annotations,\r\n          ...positionAnnotations,\r\n        };\r\n        taskSpec.annotations = mergedAnnotations;\r\n        const taskSpecWithAnnotation: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: mergedAnnotations,\r\n        };\r\n        const taskId = getUniqueTaskName(taskSpec.componentRef.spec?.name ?? \"Task\");\r\n        graphSpec = { ...graphSpec, tasks: { ...graphSpec.tasks } };\r\n        graphSpec.tasks[taskId] = taskSpecWithAnnotation;\r\n        replaceGraphSpec(graphSpec);\r\n      } else if (nodeType === \"input\") {\r\n        const inputId = getUniqueInputName();\r\n        const inputSpec: InputSpec = {\r\n          name: inputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const inputs = (componentSpec.inputs ?? []).concat([inputSpec]);\r\n        componentSpec = { ...componentSpec, inputs: inputs };\r\n        replaceComponentSpec(componentSpec);\r\n      } else if (nodeType === \"output\") {\r\n        const outputId = getUniqueOutputName();\r\n        const outputSpec: OutputSpec = {\r\n          name: outputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const outputs = (componentSpec.outputs ?? []).concat([outputSpec]);\r\n        componentSpec = { ...componentSpec, outputs: outputs };\r\n        replaceComponentSpec(componentSpec);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlow\r\n      {...rest}\r\n      elements={elements}\r\n      nodeTypes={nodeTypes}\r\n      onConnect={onConnect}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onElementsRemove={onElementsRemove}\r\n      onLoad={onLoad}\r\n    >\r\n      {children}\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default GraphComponentSpecFlow;\r\n","/**\r\n * @license\r\n * Copyright 2022 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2022 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nexport const componentLibraryUrl =\r\n  process.env.PUBLIC_URL + \"/component_library.yaml\";\r\n\r\nexport const pipelineLibraryUrl =\r\n  process.env.PUBLIC_URL + \"/pipeline_library.yaml\";\r\n\r\n// TODO: Remove this in favor of taking the first pipeline from the pipeline library\r\nexport const defaultPipelineUrl =\r\n\"https://raw.githubusercontent.com/js-ts/component_check/main/test.pipeline.component.yaml\";\r\n\r\nexport interface ComponentSearchConfig {\r\n  ComponentFeedUrls?: string[];\r\n  GitHubSearchLocations?: string[];\r\n}\r\n\r\nexport const componentSearchConfig: ComponentSearchConfig = {\r\n  ComponentFeedUrls: [\r\n    \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/pipeline_component_feed/pipeline_component_feed.yaml\",\r\n  ],\r\n  GitHubSearchLocations: [\"repo:Ark-kun/pipeline_components path:components\"],\r\n};\r\n\r\nexport const googleCloudOAuthClientId =\r\n  \"640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com\";\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSearchConfig } from \"./appSettings\";\r\nimport { httpGetWithCache } from \"./cacheUtils\";\r\nimport {\r\n  ComponentSpec,\r\n  ComponentReference,\r\n  isValidComponentSpec,\r\n} from \"./componentSpec\";\r\nimport { preloadComponentReferences } from \"./DragNDrop/samplePipelines\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\nconst getSingleGitHubCodeSearchPageWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\"\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\nasync function* searchComponentsOnGitHubToGetUrlsAndHashes(\r\n  searchLocations: string[]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  // TODO: If the number of components exceeds 1000 we should issue separate query for each location.\r\n  // TODO: Perhaps try to filter by component contents (inputValue, inputPath, outputPath, graph, implementation)\r\n  const queryParts = [\"filename:component.yaml\"].concat(searchLocations);\r\n  const query = queryParts.join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await getSingleGitHubCodeSearchPageWithCache(\r\n      query,\r\n      page\r\n    );\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield {\r\n        url: githubHtmlUrlToDownloadUrl(item.html_url),\r\n        hash: item.sha as string,\r\n      };\r\n    }\r\n    await new Promise((resolve) =>\r\n      setTimeout(resolve, ((60 * 1000) / 10) * (1 + 0.1))\r\n    );\r\n  }\r\n  return urlsAndHashes;\r\n}\r\n\r\nconst searchComponentsOnGitHubAndCacheCandidateBlobs = async (\r\n  searchLocations: string[]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of searchComponentsOnGitHubToGetUrlsAndHashes(\r\n    searchLocations\r\n  )) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME);\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  const componentSpecObj = yaml.load(componentText);\r\n  if (typeof componentSpecObj !== \"object\" || componentSpecObj === null) {\r\n    throw Error(\r\n      `componentText is not a YAML-encoded object: ${componentSpecObj}`\r\n    );\r\n  }\r\n  if (!isValidComponentSpec(componentSpecObj)) {\r\n    throw Error(\r\n      `componentText does not encode a valid pipeline component: ${componentSpecObj}`\r\n    );\r\n  }\r\n  const componentSpec = componentSpecObj;\r\n  return componentSpec;\r\n};\r\n\r\nconst importComponentsFromGitHubSearch = async (searchLocations: string[]) => {\r\n  console.debug(\"Starting importComponentsFromGitHubSearch\");\r\n  const urlsAndHashesIterator =\r\n    searchComponentsOnGitHubToGetUrlsAndHashes(searchLocations);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(\r\n        `Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`\r\n      );\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(\r\n          `Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`\r\n        );\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        const componentSpecObj = yaml.load(componentText);\r\n        if (typeof componentSpecObj !== \"object\" || componentSpecObj === null) {\r\n          throw Error(\r\n            `componentText is not a YAML-encoded object: ${componentSpecObj}`\r\n          );\r\n        }\r\n        if (!isValidComponentSpec(componentSpecObj)) {\r\n          throw Error(\r\n            `componentText does not encode a valid pipeline component: ${componentSpecObj}`\r\n          );\r\n        }\r\n        componentSpec = componentSpecObj;\r\n      } catch (err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(\r\n          hash,\r\n          'Component lacks the \"implementation\" section.'\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished importComponentsFromGitHubSearch\");\r\n};\r\n\r\ninterface ComponentFeedEntry {\r\n  componentRef: ComponentReference;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  data: string;\r\n}\r\n\r\ninterface ComponentFeed {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  components: ComponentFeedEntry[];\r\n}\r\n\r\n// Type guards\r\nconst isComponentFeedEntry = (obj: any): obj is ComponentFeedEntry =>\r\n  \"componentRef\" in obj;\r\n\r\nconst isComponentFeedEntryArray = (obj: any): obj is ComponentFeedEntry[] =>\r\n  Array.isArray(obj) && obj.every(isComponentFeedEntry);\r\n\r\nconst isComponentFeed = (obj: any): obj is ComponentFeed =>\r\n  typeof obj === \"object\" &&\r\n  \"components\" in obj &&\r\n  isComponentFeedEntryArray(obj[\"components\"]);\r\n\r\nfunction notUndefined<T>(x: T | undefined): x is T {\r\n  return x !== undefined;\r\n}\r\n\r\nconst calculateGitBlobSha1HashHex = async (data: string | ArrayBuffer) => {\r\n  // TODO: Avoid string roundtrip\r\n  const dataString =\r\n    typeof data === \"string\" ? data : new TextDecoder().decode(data);\r\n  const gitDataString =\r\n    \"blob \" + dataString.length.toString() + \"\\0\" + dataString;\r\n  const gitDataBytes = new TextEncoder().encode(gitDataString);\r\n  const hashBuffer = await crypto.subtle.digest(\"SHA-1\", gitDataBytes);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  const hashHex = hashArray\r\n    .map((b) => b.toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n  return hashHex;\r\n};\r\n\r\nconst importComponentsFromFeed = async (componentFeedUrl: string) => {\r\n  console.debug(\"Starting importComponentsFromFeed\");\r\n  console.debug(`Downloading component feed: ${componentFeedUrl}.`);\r\n  const response = await fetch(componentFeedUrl);\r\n  const componentFeedCandidateBlob = await response.blob();\r\n  const componentFeedCandidateText = await componentFeedCandidateBlob.text();\r\n  const componentFeedCandidateObject = yaml.load(componentFeedCandidateText);\r\n  if (!isComponentFeed(componentFeedCandidateObject)) {\r\n    throw new Error(\r\n      `Component feed loaded from \"${componentFeedUrl}\" had invalid content inside.`\r\n    );\r\n  }\r\n  const componentFeed = componentFeedCandidateObject;\r\n\r\n  const urlsHashesAndData = (\r\n    await Promise.all(\r\n      componentFeed.components.map(async (entry) => {\r\n        const url = entry.componentRef.url;\r\n        if (url === undefined) {\r\n          console.error(\"Component feed entry has no reference URL.\");\r\n          return undefined;\r\n        }\r\n        return {\r\n          url: url,\r\n          hash: await calculateGitBlobSha1HashHex(entry.data),\r\n          data: entry.data,\r\n        };\r\n      })\r\n    )\r\n  ).filter(notUndefined);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsHashesAndData) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(\r\n        `Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`\r\n      );\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl = item.url;\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      let componentText = item.data;\r\n      if (componentText === undefined) {\r\n        const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n        try {\r\n          const data = await response.blob();\r\n          componentText = await data.text();\r\n        } catch (err) {\r\n          const error_message =\r\n            err instanceof Error ? err.name + \": \" + err.message : String(err);\r\n          badHashesDb.setItem(hash, error_message);\r\n          continue;\r\n        }\r\n      }\r\n      const componentSpecObj = yaml.load(componentText);\r\n      if (typeof componentSpecObj !== \"object\" || componentSpecObj === null) {\r\n        throw Error(\r\n          `componentText is not a YAML-encoded object: ${componentSpecObj}`\r\n        );\r\n      }\r\n      if (!isValidComponentSpec(componentSpecObj)) {\r\n        throw Error(\r\n          `componentText does not encode a valid pipeline component: ${componentSpecObj}`\r\n        );\r\n      }\r\n      const componentSpec = componentSpecObj;\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(\r\n          hash,\r\n          'Component lacks the \"implementation\" section.'\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished importComponentsFromFeed\");\r\n};\r\n\r\nexport const refreshComponentDb = async (\r\n  componentSearchConfig: ComponentSearchConfig\r\n) => {\r\n  if (componentSearchConfig.ComponentFeedUrls) {\r\n    for (const componentFeedUrl of componentSearchConfig.ComponentFeedUrls) {\r\n      try {\r\n        await importComponentsFromFeed(componentFeedUrl);\r\n      } catch (error) {\r\n        console.error(\r\n          `Error importing component feed \"${componentFeedUrl}\": ${error}`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  if (componentSearchConfig.GitHubSearchLocations !== undefined) {\r\n    await importComponentsFromGitHubSearch(\r\n      componentSearchConfig.GitHubSearchLocations\r\n    );\r\n  }\r\n};\r\n\r\nexport const getAllComponentsAsRefs = async () => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        preloadComponentReferences(componentSpec);\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration once TypeScript property supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\nexport const isComponentDbEmpty = async () => {\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  return (await hashToContentDb.length()) === 0;\r\n};\r\n\r\nexport const searchComponentsByName = async (name: string) => {\r\n  const componentRefs = await getAllComponentsAsRefs();\r\n  return componentRefs.filter(\r\n    (ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false\r\n  );\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\n\r\nconst preloadComponentReferences = async (\r\n  componentSpec: ComponentSpec,\r\n  componentMap?: Map<string, ComponentSpec>\r\n) => {\r\n  // This map is needed to improve efficiency and handle recursive components.\r\n  if (componentMap === undefined) {\r\n    componentMap = new Map<string, ComponentSpec>();\r\n  }\r\n  if (\"graph\" in componentSpec.implementation) {\r\n    for (const taskSpec of Object.values(\r\n      componentSpec.implementation.graph.tasks\r\n    )) {\r\n      const componentUrl = taskSpec.componentRef.url;\r\n      if (\r\n        taskSpec.componentRef.spec === undefined &&\r\n        componentUrl !== undefined\r\n      ) {\r\n        let taskComponentSpec = componentMap.get(componentUrl);\r\n        if (taskComponentSpec === undefined) {\r\n          taskComponentSpec = await downloadComponentDataWithCache(\r\n            componentUrl\r\n          );\r\n          componentMap.set(componentUrl, taskComponentSpec);\r\n        }\r\n        taskSpec.componentRef.spec = taskComponentSpec;\r\n        await preloadComponentReferences(taskComponentSpec, componentMap);\r\n      }\r\n    }\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nconst loadComponentFromUrl = async (\r\n  url: string,\r\n  preloadChildComponentSpecs = true\r\n) => {\r\n  let componentSpec = await downloadComponentDataWithCache(url);\r\n  if (preloadChildComponentSpecs) {\r\n    componentSpec = await preloadComponentReferences(componentSpec);\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nexport { loadComponentFromUrl, preloadComponentReferences };\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but could not find it\");\r\n  }\r\n  return response2;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { DragEvent } from \"react\";\r\n\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\ninterface DraggableComponentProps\r\n  extends React.DetailedHTMLProps<\r\n    React.HTMLAttributes<HTMLDivElement>,\r\n    HTMLDivElement\r\n  > {\r\n  componentReference: ComponentReference;\r\n}\r\n\r\nconst DraggableComponent = ({\r\n  componentReference,\r\n  ...props\r\n}: DraggableComponentProps) => {\r\n  return (\r\n    <div\r\n      className=\"react-flow__node react-flow__node-task sidebar-node\"\r\n      draggable\r\n      onDragStart={(event: DragEvent) => {\r\n        const taskSpec: TaskSpec = {\r\n          componentRef: componentReference,\r\n        };\r\n        return onDragStart(event, { task: taskSpec });\r\n      }}\r\n      {...props}\r\n    >\r\n      {componentReference.spec?.name ?? \"Component\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DraggableComponent;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { ArgumentType, ComponentSpec, TypeSpecType } from \"../componentSpec\";\r\n\r\ninterface ArgumentsEditorProps {\r\n  componentSpec: ComponentSpec;\r\n  componentArguments: Record<string, ArgumentType>;\r\n  setComponentArguments: (args: Record<string, ArgumentType>) => void;\r\n  shrinkToWidth?: boolean;\r\n}\r\n\r\nconst getPatternForTypeSpec = (typeSpec?: TypeSpecType) => {\r\n  // TODO: Implement\r\n  return undefined;\r\n};\r\n\r\nconst typeSpecToString = (typeSpec?: TypeSpecType): string => {\r\n  if (typeSpec === undefined) {\r\n    return \"Any\";\r\n  }\r\n  if (typeof typeSpec === \"string\") {\r\n    return typeSpec;\r\n  }\r\n  return JSON.stringify(typeSpec);\r\n};\r\n\r\nconst ArgumentsEditor = ({\r\n  componentSpec,\r\n  componentArguments,\r\n  setComponentArguments,\r\n  shrinkToWidth = false,\r\n}: ArgumentsEditorProps) => {\r\n  return (\r\n    <div\r\n      className=\"highlight-invalid-inputs\"\r\n      style={{\r\n        display: \"table\",\r\n        borderSpacing: \"5px\",\r\n        // Enables shrinking the table. But also makes all columns same width regardless of the content\r\n        tableLayout: shrinkToWidth ? \"fixed\" : \"auto\",\r\n        // Width is needed for table-layout: \"fixed\" to work\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      {(componentSpec.inputs ?? []).map((inputSpec) => {\r\n        const inputName = inputSpec.name;\r\n        let value: string | undefined = undefined;\r\n        let placeholder: string | undefined = undefined;\r\n        const argument = componentArguments[inputName];\r\n        if (argument === undefined) {\r\n          value = inputSpec.default;\r\n        } else {\r\n          if (typeof argument === \"string\") {\r\n            value = argument;\r\n          } else if (\"taskOutput\" in argument) {\r\n            placeholder = `<from task ${argument.taskOutput.taskId} / ${argument.taskOutput.outputName}>`;\r\n          } else if (\"graphInput\" in argument) {\r\n            placeholder = `<from graph input ${argument.graphInput.inputName}>`;\r\n          } else {\r\n            placeholder = \"<reference>\";\r\n          }\r\n        }\r\n\r\n        const argumentIsRequiredButMissing =\r\n          !(inputName in componentArguments) &&\r\n          inputSpec.optional !== true &&\r\n          inputSpec.default === undefined;\r\n\r\n        const typeSpecString =\r\n          typeSpecToString(inputSpec.type) +\r\n          (inputSpec.optional === true ? \"?\" : \"\");\r\n\r\n        return (\r\n          <div\r\n            key={inputName}\r\n            style={{\r\n              display: \"table-row\",\r\n            }}\r\n          >\r\n            <label\r\n              title={`${inputName} (${typeSpecString})`}\r\n              style={{\r\n                textAlign: \"right\",\r\n                display: \"table-cell\",\r\n                whiteSpace: \"nowrap\",\r\n                overflow: \"hidden\",\r\n                textOverflow: \"ellipsis\",\r\n              }}\r\n            >\r\n              <span>\r\n                {inputName} (\r\n                <span\r\n                  style={{\r\n                    textOverflow: \"ellipsis\",\r\n                    overflow: \"hidden\",\r\n                    maxWidth: \"90px\",\r\n                    display: \"inline-block\",\r\n                    verticalAlign: \"bottom\",\r\n                  }}\r\n                  title={typeSpecString}\r\n                >\r\n                  {typeSpecString}\r\n                </span>\r\n                )\r\n              </span>\r\n            </label>\r\n            <input\r\n              style={{\r\n                display: \"table-cell\",\r\n                // Prevents border flickering and disappearing on movement\r\n                borderWidth: \"1px\",\r\n                // Overriding both min-width and max-width to enable the input element shrinking\r\n                minWidth: \"50px\",\r\n                maxWidth: \"100%\",\r\n              }}\r\n              placeholder={placeholder}\r\n              required={argumentIsRequiredButMissing}\r\n              value={value ?? \"\"}\r\n              pattern={getPatternForTypeSpec(inputSpec.type)}\r\n              onChange={(e) => {\r\n                componentArguments[inputName] = e.target.value;\r\n                setComponentArguments({ ...componentArguments });\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"table-cell\",\r\n                // Setting explicit width to make the button column smaller. Otherwise it takes 1/3 of the total width when the table-layout is set to fixed.\r\n                // The width should have been set to \"min-content\", but that does not work for some reason\r\n                width: \"30px\",\r\n              }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                title=\"Reset to default\"\r\n                onClick={(e) => {\r\n                  delete componentArguments[inputName];\r\n                  setComponentArguments({ ...componentArguments });\r\n                }}\r\n                disabled={!(inputName in componentArguments)}\r\n              >\r\n                ⌧\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArgumentsEditor;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\n// Manually converted from https://github.com/kubeflow/pipelines/blob/master/api/v2alpha1/pipeline_spec.proto\r\n\r\n// The spec of a pipeline job.\r\nexport interface PipelineJob {\r\n  // Name of the job.\r\n  name?: string;\r\n\r\n  // User friendly display name\r\n  displayName?: string;\r\n  // Definition of the pipeline that is being executed.\r\n  pipelineSpec: PipelineSpec;\r\n\r\n  // The labels with user-defined metadata to organize PipelineJob.\r\n  labels?: { [k: string]: string };\r\n\r\n  // Runtime config of the pipeline.\r\n  runtimeConfig: RuntimeConfig;\r\n}\r\n\r\n// The runtime config of a PipelineJob.\r\nexport interface RuntimeConfig {\r\n  // The runtime parameters of the PipelineJob. The parameters will be\r\n  // passed into [PipelineJob.pipeline_spec][] to replace the placeholders\r\n  // at runtime.\r\n  parameters?: { [k: string]: MlmdValue };\r\n\r\n  // A path in a Cloud Storage bucket which will be treated as the root\r\n  // output directory of the pipeline. It is used by the system to\r\n  // generate the paths of output artifacts.\r\n  // This is a GCP-specific optimization.\r\n  gcsOutputDirectory: string;\r\n}\r\n\r\n// The spec of a pipeline.\r\nexport interface PipelineSpec {\r\n  // The metadata of the pipeline.\r\n  pipelineInfo?: PipelineInfo;\r\n\r\n  // The deployment config of the pipeline.\r\n  // The deployment config can be extended to provide platform specific configs.\r\n  deploymentSpec: PipelineDeploymentConfig;\r\n\r\n  // The version of the sdk, which compiles the spec.\r\n  sdkVersion?: string;\r\n\r\n  // The version of the schema.\r\n  schemaVersion?: string;\r\n\r\n  // The map of name to definition of all components used in this pipeline.\r\n  components: { [k: string]: ComponentSpec };\r\n\r\n  // The definition of the main pipeline.  Execution of the pipeline is\r\n  // completed upon the completion of this component.\r\n  root: ComponentSpec;\r\n}\r\n\r\n// Definition of a component.\r\nexport interface ComponentSpec {\r\n  // Definition of the input parameters and artifacts of the component.\r\n  inputDefinitions?: ComponentInputsSpec;\r\n\r\n  // Definition of the output parameters and artifacts of the component.\r\n  outputDefinitions?: ComponentOutputsSpec;\r\n\r\n  // Either a DAG or a single execution.\r\n  //oneof implementation {\r\n  dag?: DagSpec;\r\n  executorLabel?: string;\r\n  //}\r\n}\r\n\r\n// A DAG contains multiple tasks.\r\nexport interface DagSpec {\r\n  // The tasks inside the dag.\r\n  tasks: { [k: string]: PipelineTaskSpec };\r\n\r\n  // Defines how the outputs of the dag are linked to the sub tasks.\r\n  outputs?: DagOutputsSpec;\r\n}\r\n\r\n// Definition of the output artifacts and parameters of the DAG component.\r\nexport interface DagOutputsSpec {\r\n  // Name to the output artifact channel of the DAG.\r\n  artifacts?: { [k: string]: DagOutputArtifactSpec };\r\n\r\n  // The name to the output parameter.\r\n  parameters?: { [k: string]: DagOutputParameterSpec };\r\n}\r\n\r\n// Selects a defined output artifact from a sub task of the DAG.\r\nexport interface ArtifactSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_artifact_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Selects a list of output artifacts that will be aggregated to the single\r\n// output artifact channel of the DAG.\r\nexport interface DagOutputArtifactSpec {\r\n  // The selected artifacts will be aggregated as output as a single\r\n  // output channel of the DAG.\r\n  artifactSelectors: ArtifactSelectorSpec[];\r\n}\r\n\r\n// Selects a defined output parameter from a sub task of the DAG.\r\nexport interface ParameterSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_parameter_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Aggregate output parameters from sub tasks into a list object.\r\nexport interface ParameterSelectorsSpec {\r\n  parameterSelectors: ParameterSelectorSpec[];\r\n}\r\n\r\n// Aggregates output parameters from sub tasks into a map object.\r\nexport interface MapParameterSelectorsSpec {\r\n  mappedParameters: { [k: string]: ParameterSelectorSpec };\r\n}\r\n\r\n// We support four ways to fan-in output parameters from sub tasks to the DAG\r\n// parent task.\r\n// 1. Directly expose a single output parameter from a sub task,\r\n// 2. (Conditional flow) Expose a list of output from multiple tasks\r\n// (some might be skipped) but allows only one of the output being generated.\r\n// 3. Expose a list of outputs from multiple tasks (e.g. iterator flow).\r\n// 4. Expose the aggregation of output parameters as a name-value map.\r\nexport type DagOutputParameterSpec =\r\n  // Returns the sub-task parameter as a DAG parameter.  The selected\r\n  // parameter must have the same type as the DAG parameter type.\r\n  | { valueFromParameter: ParameterSelectorSpec }\r\n  // Returns one of the sub-task parameters as a DAG parameter. If there are\r\n  // multiple values are available to select, the DAG will fail. All the\r\n  // selected parameters must have the same type as the DAG parameter type.\r\n  | { valueFromOneof: ParameterSelectorsSpec };\r\n\r\n// Definition specification of the component input parameters and artifacts.\r\nexport interface ComponentInputsSpec {\r\n  // Name to artifact input.\r\n  artifacts?: { [k: string]: InputArtifactSpec };\r\n\r\n  // Name to parameter input.\r\n  parameters?: { [k: string]: InputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact input.\r\nexport interface InputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n}\r\n\r\n// Definition of a parameter input.\r\nexport interface InputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Definition specification of the component output parameters and artifacts.\r\nexport interface ComponentOutputsSpec {\r\n  // Name to artifact output.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n\r\n  // Name to parameter output.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact output.\r\nexport interface OutputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // Properties of the Artifact.\r\n  metadata?: { [k: string]: any };\r\n}\r\n\r\n// Definition of a parameter output.\r\nexport interface OutputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// The spec of task inputs.\r\n//export interface TaskInputsSpec {\r\nexport interface TaskArgumentsSpec {\r\n  // A map of input parameters which are small values, stored by the system and\r\n  // can be queried.\r\n  parameters?: { [k: string]: ParameterArgumentSpec };\r\n  // A map of input artifacts.\r\n  artifacts?: { [k: string]: ArtifactArgumentSpec };\r\n}\r\n\r\n// The specification of a task input artifact.\r\n//export type InputArtifactSpec =\r\nexport type ArtifactArgumentSpec =\r\n  // Pass the input artifact from another task within the same parent\r\n  // component.\r\n  | { taskOutputArtifact: TaskOutputArtifactSpec }\r\n  // Pass the input artifact from parent component input artifact.\r\n  | { componentInputArtifact: string };\r\n\r\nexport interface TaskOutputArtifactSpec {\r\n  // The name of the upstream task which produces the output that matches\r\n  // with the `output_artifact_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Represents an input parameter. The value can be taken from an upstream\r\n// task's output parameter (if specifying `producer_task` and\r\n// `output_parameter_key`, or it can be a runtime value, which can either be\r\n// determined at compile-time, or from a pipeline parameter.\r\n//export interface InputParameterSpec {\r\nexport interface ParameterArgumentSpec {\r\n  //oneof kind {\r\n  // Output parameter from an upstream task.\r\n  taskOutputParameter?: TaskOutputParameterSpec;\r\n  // A constant value or runtime parameter.\r\n  runtimeValue?: ValueOrRuntimeParameter;\r\n  // Pass the input parameter from parent component input parameter.\r\n  componentInputParameter?: string;\r\n  // The final status of an upstream task.\r\n  taskFinalStatus?: TaskFinalStatus;\r\n  //}\r\n\r\n  // Selector expression of Common Expression Language (CEL)\r\n  // that applies to the parameter found from above kind.\r\n  //\r\n  // The expression is applied to the Value type\r\n  // [Value][].  For example,\r\n  // 'size(string_value)' will return the size of the Value.string_value.\r\n  //\r\n  // After applying the selection, the parameter will be returned as a\r\n  // [Value][].  The type of the Value is either deferred from the input\r\n  // definition in the corresponding\r\n  // [ComponentSpec.input_definitions.parameters][], or if not found,\r\n  // automatically deferred as either string value or double value.\r\n  //\r\n  // In addition to the builtin functions in CEL, The value.string_value can\r\n  // be treated as a json string and parsed to the [google.protobuf.Value][]\r\n  // proto message. Then, the CEL expression provided in this field will be\r\n  // used to get the requested field. For examples,\r\n  //  - if Value.string_value is a json array of \"[1.1, 2.2, 3.3]\",\r\n  //  'parseJson(string_value)[i]' will pass the ith parameter from the list\r\n  //  to the current task, or\r\n  //  - if the Value.string_value is a json map of \"{\"a\": 1.1, \"b\": 2.2,\r\n  //  \"c\": 3.3}, 'parseJson(string_value)[key]' will pass the map value from\r\n  //  the struct map to the current task.\r\n  //\r\n  // If unset, the value will be passed directly to the current task.\r\n  parameterExpressionSelector?: string;\r\n}\r\n\r\n// Represents an upstream task's output parameter.\r\nexport interface TaskOutputParameterSpec {\r\n  // The name of the upstream task which produces the output parameter that\r\n  // matches with the `output_parameter_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Represents an upstream task's final status. The field can only be set if\r\n// the schema version is `2.0.0`. The resolved input parameter will be a\r\n// json payload in string type.\r\nexport interface TaskFinalStatus {\r\n  // The name of the upsteram task where the final status is coming from.\r\n  producerTask: string;\r\n}\r\n\r\n// The spec of task outputs.\r\nexport interface TaskOutputsSpec {\r\n  // A map of output parameters which are small values, stored by the system and\r\n  // can be queried. The output key is used\r\n  // by [TaskInputsSpec.InputParameterSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output parameter.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n  // A map of output artifacts. Keyed by output key. The output key is used\r\n  // by [TaskInputsSpec.InputArtifactSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output artifact.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n}\r\n\r\n// The specification of a task output artifact.\r\nexport interface OutputArtifactSpec {\r\n  // The type of the artifact.\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // The properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  properties?: { [k: string]: ValueOrRuntimeParameter };\r\n\r\n  // The custom properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  customProperties?: { [k: string]: ValueOrRuntimeParameter };\r\n}\r\n\r\n// Specification for output parameters produced by the task.\r\nexport interface OutputParameterSpec {\r\n  // Required field. The type of the output parameter.\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Represent primitive types.\r\nexport enum PrimitiveTypeEnum {\r\n  PRIMITIVE_TYPE_UNSPECIFIED = \"PRIMITIVE_TYPE_UNSPECIFIED\",\r\n  INT = \"INT\",\r\n  DOUBLE = \"DOUBLE\",\r\n  STRING = \"STRING\",\r\n}\r\n\r\n// The spec of a pipeline task.\r\nexport interface PipelineTaskSpec {\r\n  // Basic info of a pipeline task.\r\n  taskInfo?: PipelineTaskInfo;\r\n\r\n  // Specification for task inputs which contains parameters and artifacts.\r\n  // <Alexey Volkov>: This should have been named: `arguments: TaskArguments`\r\n  inputs?: TaskArgumentsSpec;\r\n\r\n  // A list of names of upstream tasks that do not provide input\r\n  // artifacts for this task, but nonetheless whose completion this task depends\r\n  // on.\r\n  dependentTasks?: string[];\r\n\r\n  cachingOptions?: CachingOptions;\r\n\r\n  // Reference to a component.  Use this field to define either a DAG or an\r\n  // executor.\r\n  componentRef: ComponentRef;\r\n\r\n  // Trigger policy of the task.\r\n  triggerPolicy?: TriggerPolicy;\r\n\r\n  // Iterator supports fanning out the task into multiple sub-tasks based on the\r\n  // values of input artifact or parameter. The current task will become the\r\n  // parent of all the fan-out tasks. The output of the current task follows\r\n  // the following conventions:\r\n  // * Output artifacts with the same name of each iteration will be merged\r\n  //   into one output artifact channel of the parent iterator task.\r\n  // * Output parameters with the same name of each iteration will be merged\r\n  //   into a string output parameter with the same name with content being a\r\n  //   JSON array.\r\n  //\r\n  // For example, if an iterator starts two sub-tasks (t1 and t2) with the\r\n  // following outputs.\r\n  //\r\n  // t1.outputs.parameters = { 'p': 'v1' }\r\n  // t1.outputs.artifacts = { 'a': [a1] }\r\n  // t2.outputs.parameters = { 'p': 'v2' }\r\n  // t2.outputs.artifacts = { 'a': [a2] }\r\n  // parent_task.outputs.parameters = { 'p': '[\"v1\", \"v2\"]' }\r\n  // parent_task.outputs.artifacts = { 'a': [a1, a2] }\r\n  //oneof iterator {\r\n  // Iterator to iterate over an artifact input.\r\n  artifactIterator?: ArtifactIteratorSpec;\r\n  // Iterator to iterate over a parameter input.\r\n  parameterIterator?: ParameterIteratorSpec;\r\n  //}\r\n}\r\n\r\nexport interface CachingOptions {\r\n  // Whether or not to enable cache for this task. Defaults to false.\r\n  enableCache: boolean;\r\n}\r\n\r\n// Trigger policy defines how the task gets triggered. If a task is not\r\n// triggered, it will run into SKIPPED state.\r\nexport interface TriggerPolicy {\r\n  // An expression which will be evaluated into a boolean value. True to\r\n  // trigger the task to run. The expression follows the language of\r\n  // [CEL Spec][https://github.com/google/cel-spec]. It can access the data\r\n  // from [ExecutorInput][] message of the task.\r\n  // For example:\r\n  // - `inputs.artifacts['model'][0].properties['accuracy']*100 > 90`\r\n  // - `inputs.parameters['type'] == 'foo' && inputs.parameters['num'] == 1`\r\n  condition: string;\r\n\r\n  // The trigger strategy of this task.  The `strategy` and `condition` are\r\n  // in logic \"AND\", as a task will only be tested for the `condition` when\r\n  // the `strategy` is meet.\r\n  // Unset or set to default value of TRIGGER_STRATEGY_UNSPECIFIED behaves the\r\n  // same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  strategy: TriggerStrategy;\r\n}\r\n\r\n// An enum defines the trigger strategy of when the task will be ready to be\r\n// triggered.\r\n// ALL_UPSTREAM_TASKS_SUCCEEDED - all upstream tasks in succeeded state.\r\n// ALL_UPSTREAM_TASKS_COMPLETED - all upstream tasks in any final state.\r\n// (Note that CANCELLED is also a final state but job will not trigger new\r\n// tasks when job is in CANCELLING state, so that the task with the trigger\r\n// policy at ALL_UPSTREAM_TASKS_COMPLETED will not start when job\r\n// cancellation is in progress.)\r\nenum TriggerStrategy {\r\n  // Unspecified.  Behave the same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  TRIGGER_STRATEGY_UNSPECIFIED = \"TRIGGER_STRATEGY_UNSPECIFIED\",\r\n  // Specifies that all upstream tasks are in succeeded state.\r\n  ALL_UPSTREAM_TASKS_SUCCEEDED = \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n  // Specifies that all upstream tasks are in any final state.\r\n  ALL_UPSTREAM_TASKS_COMPLETED = \"ALL_UPSTREAM_TASKS_COMPLETED\",\r\n}\r\n\r\n// The spec of an artifact iterator. It supports fan-out a workflow from a list\r\n// of artifacts.\r\nexport interface ArtifactIteratorSpec {\r\n  // The items to iterate.\r\n  items: ArtifactItemsSpec;\r\n  // The name of the input artifact channel which has the artifact item from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n// Specifies the name of the artifact channel which contains the collection of\r\n// items to iterate. The iterator will create a sub-task for each item of\r\n// the collection and pass the item as a new input artifact channel as\r\n// specified by [item_input][].\r\nexport interface ArtifactItemsSpec {\r\n  // The name of the input artifact.\r\n  inputArtifact: string;\r\n}\r\n\r\n// The spec of a parameter iterator. It supports fan-out a workflow from a\r\n// string parameter which contains a JSON array.\r\nexport interface ParameterIteratorSpec {\r\n  // The items to iterate.\r\n  items: ParameterItemsSpec;\r\n  // The name of the input parameter which has the item value from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n\r\n// Specifies the spec to describe the parameter items to iterate.\r\nexport type ParameterItemsSpec =\r\n  // Specifies where to get the collection of items to iterate. The iterator\r\n  // will create a sub-task for each item of the collection and pass the item\r\n  // as a new input parameter as specified by [item_input][].\r\n  // The raw JSON array.\r\n  | { raw: string }\r\n  // The name of the input parameter whose value has the items collection.\r\n  // The parameter must be in STRING type and its content can be parsed\r\n  // as a JSON array.\r\n  | { input_parameter: string };\r\n\r\nexport interface ComponentRef {\r\n  // The name of a component. Refer to the key of the\r\n  // [PipelineSpec.components][] map.\r\n  name: string;\r\n}\r\n\r\n// Basic info of a pipeline.\r\nexport interface PipelineInfo {\r\n  // Required field. The name of the pipeline.\r\n  // The name will be used to create or find pipeline context in MLMD.\r\n  name: string;\r\n}\r\n\r\n// The definition of a artifact type in MLMD.\r\nexport type ArtifactTypeSchema =\r\n  // The name of the type. The format of the title must be:\r\n  // `<namespace>.<title>.<version>`.\r\n  // Examples:\r\n  //  - `aiplatform.Model.v1`\r\n  //  - `acme.CustomModel.v2`\r\n  // When this field is set, the export type must be pre-registered in the MLMD\r\n  // store.\r\n  | { schemaTitle: string }\r\n\r\n  // Points to a YAML file stored on Google Cloud Storage describing the\r\n  // format.\r\n  | { schemaUri: string }\r\n\r\n  // Contains a raw YAML string, describing the format of\r\n  // the properties of the type.\r\n  | { instanceSchema: string };\r\n\r\n// The basic info of a task.\r\nexport interface PipelineTaskInfo {\r\n  // The unique name of the task within the pipeline definition. This name\r\n  // will be used in downstream tasks to indicate task and data dependencies.\r\n  // <Alexey Volkov>: This ^^^ does not seem to be true. This name seems to be used only as display name.\r\n  name: string;\r\n}\r\n\r\n// Definition for a value or reference to a runtime parameter. A\r\n// ValueOrRuntimeParameter instance can be either a field value that is\r\n// determined during compilation time, or a runtime parameter which will be\r\n// determined during runtime.\r\nexport type ValueOrRuntimeParameter =\r\n  // Constant value which is determined in compile time.\r\n  | { constantValue: MlmdValue }\r\n  // The runtime parameter refers to the parent component input parameter.\r\n  | { runtimeParameter: string };\r\n\r\nexport type MlmdValue =\r\n  | {\r\n      stringValue: string;\r\n    }\r\n  | {\r\n      intValue: number;\r\n    }\r\n  | {\r\n      doubleValue: number;\r\n    };\r\n\r\n// The definition of the deployment config of the pipeline. It contains the\r\n// the platform specific executor configs for KFP OSS.\r\nexport interface PipelineDeploymentConfig {\r\n  // Map from executor label to executor spec.\r\n  executors: { [k: string]: ExecutorSpec };\r\n}\r\n\r\n// The specification on a container invocation.\r\n// The string fields of the message support string based placeholder contract\r\n// defined in [ExecutorInput](). The output of the container follows the\r\n// contract of [ExecutorOutput]().\r\nexport interface PipelineContainerSpec {\r\n  // The image uri of the container.\r\n  image: string;\r\n  // The main entrypoint commands of the container to run. If not provided,\r\n  // fallback to use the entry point command defined in the container image.\r\n  command?: string[];\r\n  // The arguments to pass into the main entrypoint of the container.\r\n  args?: string[];\r\n\r\n  // The lifecycle hooks of the container executor.\r\n  // lifecycle: Lifecycle;\r\n\r\n  resources?: ResourceSpec;\r\n}\r\n\r\n// The specification on the resource requirements of a container execution.\r\n// This can include specification of vCPU, memory requirements, as well as\r\n// accelerator types and counts.\r\nexport interface ResourceSpec {\r\n  // The limit of the number of vCPU cores. This container execution needs\r\n  // at most cpu_limit vCPU to run.\r\n  cpuLimit: number;\r\n\r\n  // The memory limit in GB. This container execution needs at most\r\n  // memory_limit RAM to run.\r\n  memoryLimit: number;\r\n\r\n  accelerator: AcceleratorConfig;\r\n}\r\n\r\n// The specification of the executor.\r\nexport type ExecutorSpec =\r\n  // Starts a container.\r\n  { container: PipelineContainerSpec };\r\n// Import an artifact.\r\n//| { importer: ImporterSpec }\r\n// Resolves an existing artifact.\r\n//| { resolver: ResolverSpec }\r\n// Starts a Google Cloud AI Platform CustomJob.\r\n//| { custom_job: AIPlatformCustomJobSpec };\r\n\r\n// The specification on the accelerators being attached to this container.\r\nexport interface AcceleratorConfig {\r\n  // The type of accelerators.\r\n  type: string;\r\n  // The number of accelerators.\r\n  count: number;\r\n}\r\n\r\n// Missing: Lifecycle\r\n// Missing: ImporterSpec\r\n// Missing: ResolverSpec\r\n// Missing: RuntimeArtifact\r\n// Missing: ArtifactList\r\n// Missing: ExecutorInput\r\n// Missing: ExecutorOutput\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  StringOrPlaceholder,\r\n  TypeSpecType,\r\n  isContainerImplementation,\r\n  isGraphImplementation,\r\n  InputSpec,\r\n} from \"../componentSpec\";\r\n\r\nimport * as vertex from \"./vertexPipelineSpec\";\r\n\r\n// # How to handle I/O:\r\n// Rules (might have exceptions)\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// # Fixing conflicts:\r\n// 1) Artifact (may only come from task output) is consumed as value.\r\n//   Solution 1) (implemented): Change input from parameter to artifact and use the input.artifact.value placeholder.\r\n//      Cons: The downstream component input definitions depend on arguments. (Some inputs are changed from parameter to artifact.)\r\n//   Solution 2): Add parameter output (with the same name as the artifact output) to the upstream component. The paths should be the same, so a single file will be treated as both parameter and output.\r\n//      Cons: The upstream component output definitions depend on downstream consumption style. (Although parameter outputs are added, not changed.)\r\n//   Solution 3): Insert a \"Downloader\" task between upstream and downstream.\r\n//      Cons: Extra container task\r\n// 2) Parameter (pipeline input or constant value) is consumed as artifact (as file).\r\n//   Solution 1): Insert a \"Uploader\" task to convert parameter to artifact.\r\n//      Cons: Extra container task\r\n\r\nconst sanitizePipelineInfoName = (pipelineContextName: string) => {\r\n  return pipelineContextName.toLowerCase().replace(/\\W/, \"-\");\r\n};\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n  command?: string[];\r\n  args?: string[];\r\n  inputsConsumedAsParameter: Set<string>;\r\n  inputsConsumedAsArtifact: Set<string>;\r\n};\r\n\r\nconst resolveCommandLine = (\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>\r\n): ResolvedCommandLineAndArgs => {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    throw Error(\"resolveCommandLine only supports container components\");\r\n  }\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const inputsConsumedAsParameter = new Set<string>();\r\n  const inputsConsumedAsArtifact = new Set<string>();\r\n  const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n    if (typeof arg == \"string\") {\r\n      return [arg];\r\n    } else if (\"inputValue\" in arg) {\r\n      const inputName = arg.inputValue;\r\n      if (!inputsThatHaveParameterArguments.has(inputName)) {\r\n        // ! Important details:\r\n        // In this branch, the argument comes from task output (or graph input with artifact argument).\r\n        // All outputs are artifacts by default, so this argument is an artifact argument.\r\n        // We can either try to change the argument to parameter or make the input to be an artifact to solve the conflict.\r\n        // I choose to make the input to be artifact.\r\n        // Adding input name to inputsConsumedAsPath to make the input rendered as an artifact input.\r\n        inputsConsumedAsArtifact.add(inputName);\r\n        return [`{{$.inputs.artifacts['${inputName}'].value}}`];\r\n      } else {\r\n        inputsConsumedAsParameter.add(inputName);\r\n        return [`{{$.inputs.parameters['${inputName}']}}`];\r\n      }\r\n    } else if (\"inputPath\" in arg) {\r\n      const inputName = arg.inputPath;\r\n      inputsConsumedAsArtifact.add(inputName);\r\n      return [`{{$.inputs.artifacts['${inputName}'].path}}`];\r\n    } else if (\"outputPath\" in arg) {\r\n      const outputName = arg.outputPath;\r\n      return [`{{$.outputs.artifacts['${outputName}'].path}}`];\r\n    } else if (\"if\" in arg) {\r\n      const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n      // TODO: Check false values, not just check for true\r\n      let condEvaluatesToTrue = false;\r\n      if (typeof ifCond === \"string\") {\r\n        condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n      } else if (typeof ifCond === \"boolean\") {\r\n        condEvaluatesToTrue = ifCond;\r\n      } else if (\"isPresent\" in ifCond) {\r\n        const inputName = ifCond.isPresent;\r\n        condEvaluatesToTrue = inputName in taskArguments;\r\n      } else if (\"inputValue\" in ifCond) {\r\n        const inputName = ifCond.inputValue;\r\n        if (!(inputName in taskArguments)) {\r\n          condEvaluatesToTrue = false;\r\n        } else {\r\n          const taskArgument = taskArguments[inputName];\r\n          if (typeof taskArgument === \"string\") {\r\n            condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n          } else {\r\n            throw Error(\r\n              \"Using runtime conditions in component command line placeholders is not supported yet.\"\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        throw Error(\"Unexpected condition kind: \" + ifCond);\r\n      }\r\n      const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n      if (unresolvedArgs === undefined) {\r\n        return [];\r\n      }\r\n      return unresolvedArgs.flatMap(convertArg);\r\n    } else if (\"concat\" in arg) {\r\n      const concatArgs = arg.concat;\r\n      return [concatArgs.flatMap(convertArg).join(\"\")];\r\n    } else {\r\n      throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n    }\r\n  };\r\n\r\n  const result = {\r\n    command: containerSpec.command?.flatMap(convertArg),\r\n    args: containerSpec.args?.flatMap(convertArg),\r\n    inputsConsumedAsParameter: inputsConsumedAsParameter,\r\n    inputsConsumedAsArtifact: inputsConsumedAsArtifact,\r\n  };\r\n  return result;\r\n};\r\n\r\nconst typeSpecToVertexPrimitiveTypeEnum = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.PrimitiveTypeEnum => {\r\n  if (typeof typeSpec === \"string\") {\r\n    if ([\"integer\"].includes(typeSpec.toLowerCase())) {\r\n      return vertex.PrimitiveTypeEnum.INT;\r\n    }\r\n    if ([\"float\", \"double\"].includes(typeSpec.toLowerCase())) {\r\n      return vertex.PrimitiveTypeEnum.DOUBLE;\r\n    }\r\n  }\r\n  return vertex.PrimitiveTypeEnum.STRING;\r\n};\r\n\r\nconst typeSpecToVertexParameterSpec = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.InputParameterSpec => {\r\n  return {\r\n    type: typeSpecToVertexPrimitiveTypeEnum(typeSpec),\r\n  };\r\n};\r\n\r\nconst typeSpecToVertexArtifactTypeSchema = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.ArtifactTypeSchema => {\r\n  // TODO: Implement better mapping\r\n  const artifactTypeSchema = {\r\n    schemaTitle: \"system.Artifact\",\r\n  };\r\n  return artifactTypeSchema;\r\n};\r\n\r\nconst typeSpecToVertexArtifactSpec = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.InputArtifactSpec => {\r\n  return {\r\n    artifactType: typeSpecToVertexArtifactTypeSchema(typeSpec),\r\n  };\r\n};\r\n// const typeSpecToVertexArtifactType(typeSpec: TypeSpecType) => {\r\n//     return typeof typeSpec === \"string\" && [\"String\", \"Integer\", \"Float\", \"Double\", \"Boolean\", ]\r\n// }\r\n\r\nconst stringToMlmdValue = (\r\n  constantString: string,\r\n  primitiveType: vertex.PrimitiveTypeEnum\r\n): vertex.MlmdValue => {\r\n  switch (primitiveType) {\r\n    case vertex.PrimitiveTypeEnum.STRING:\r\n      return {\r\n        stringValue: constantString,\r\n      };\r\n    case vertex.PrimitiveTypeEnum.INT:\r\n      return {\r\n        intValue: parseInt(constantString),\r\n      };\r\n    case vertex.PrimitiveTypeEnum.DOUBLE:\r\n      return {\r\n        doubleValue: parseFloat(constantString),\r\n      };\r\n    default:\r\n      throw Error(`Unknown primitive type ${primitiveType}`);\r\n  }\r\n};\r\n\r\nconst MAKE_ARTIFACT_COMPONENT_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_EXECUTOR_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_INPUT_NAME = \"parameter\";\r\nconst MAKE_ARTIFACT_OUTPUT_NAME = \"artifact\";\r\n\r\nconst buildMakeArtifactTaskSpec = (\r\n  parameterArgumentSpec: vertex.ParameterArgumentSpec\r\n): vertex.PipelineTaskSpec => {\r\n  const taskSpec: vertex.PipelineTaskSpec = {\r\n    componentRef: {\r\n      name: MAKE_ARTIFACT_COMPONENT_ID,\r\n    },\r\n    taskInfo: {\r\n      name: \"Make artifact\",\r\n    },\r\n    inputs: {\r\n      parameters: {\r\n        [MAKE_ARTIFACT_INPUT_NAME]: parameterArgumentSpec,\r\n      },\r\n    },\r\n    cachingOptions: {\r\n      enableCache: true,\r\n    },\r\n  };\r\n  return taskSpec;\r\n};\r\n\r\nconst makeArtifactComponentSpec: vertex.ComponentSpec = {\r\n  executorLabel: MAKE_ARTIFACT_EXECUTOR_ID,\r\n  inputDefinitions: {\r\n    parameters: {\r\n      [MAKE_ARTIFACT_INPUT_NAME]: {\r\n        type: vertex.PrimitiveTypeEnum.STRING,\r\n      },\r\n    },\r\n  },\r\n  outputDefinitions: {\r\n    artifacts: {\r\n      [MAKE_ARTIFACT_OUTPUT_NAME]: {\r\n        artifactType: {\r\n          schemaTitle: \"system.Artifact\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst makeArtifactExecutorSpec: vertex.ExecutorSpec = {\r\n  container: {\r\n    image: \"alpine\",\r\n    command: [\r\n      \"sh\",\r\n      \"-ec\",\r\n      'mkdir -p \"$(dirname \"$1\")\"; printf \"%s\" \"$0\" > \"$1\"',\r\n      `{{$.inputs.parameters['${MAKE_ARTIFACT_INPUT_NAME}']}}`,\r\n      `{{$.outputs.artifacts['${MAKE_ARTIFACT_OUTPUT_NAME}'].path}}`,\r\n    ],\r\n  },\r\n};\r\n\r\nfunction buildVertexParameterArgumentSpec(\r\n  taskArgument: ArgumentType | undefined,\r\n  inputSpec: InputSpec\r\n) {\r\n  if (taskArgument === undefined) {\r\n    if (inputSpec.default !== undefined) {\r\n      taskArgument = inputSpec.default;\r\n    } else {\r\n      if (inputSpec.optional === true) {\r\n        // TODO: Decide what the behavior should be\r\n        // throw Error(`Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`);\r\n        console.error(\r\n          `Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`\r\n        );\r\n        taskArgument = \"\";\r\n      } else {\r\n        throw Error(\r\n          `Argument was not provided for required input \"${inputSpec.name}\"`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  let result: vertex.ParameterArgumentSpec;\r\n  if (typeof taskArgument === \"string\") {\r\n    result = {\r\n      runtimeValue: {\r\n        constantValue: stringToMlmdValue(\r\n          taskArgument,\r\n          typeSpecToVertexPrimitiveTypeEnum(inputSpec.type)\r\n        ),\r\n      },\r\n    };\r\n    return result;\r\n  } else if (\"graphInput\" in taskArgument) {\r\n    result = {\r\n      componentInputParameter: taskArgument.graphInput.inputName,\r\n    };\r\n    return result;\r\n  } else if (\"taskOutput\" in taskArgument) {\r\n    result = {\r\n      taskOutputParameter: {\r\n        producerTask: taskArgument.taskOutput.taskId,\r\n        outputParameterKey: taskArgument.taskOutput.outputName,\r\n      },\r\n    };\r\n    return result;\r\n  } else {\r\n    throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n  }\r\n}\r\n\r\nfunction buildVertexArtifactArgumentSpec(\r\n  taskArgument: ArgumentType | undefined,\r\n  inputSpec: InputSpec,\r\n  upstreamCannotBeArtifact: boolean,\r\n  addMakeArtifactTaskAndGetArtifactArgumentSpec: (\r\n    parameterArgumentSpec: vertex.ParameterArgumentSpec,\r\n    namePrefix?: string\r\n  ) => vertex.ArtifactArgumentSpec\r\n) {\r\n  //if (! (inputName in taskArguments)) {\r\n  if (taskArgument === undefined) {\r\n    // Checking for default value\r\n    if (inputSpec.default !== undefined) {\r\n      taskArgument = inputSpec.default;\r\n    } else {\r\n      if (inputSpec.optional === true) {\r\n        // TODO: Decide what the behavior should be\r\n        // throw Error(`Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`);\r\n        console.error(\r\n          `Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`\r\n        );\r\n        taskArgument = \"\";\r\n      } else {\r\n        throw Error(\r\n          `Argument was not provided for required input \"${inputSpec.name}\"`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  let result: vertex.ArtifactArgumentSpec;\r\n  if (typeof taskArgument === \"string\") {\r\n    const parameterArgumentSpec: vertex.ParameterArgumentSpec = {\r\n      runtimeValue: {\r\n        constantValue: {\r\n          // TODO: Check whether string is always OK here\r\n          stringValue: taskArgument,\r\n        },\r\n      },\r\n    };\r\n    // TODO: Maybe use the taskArgument as part of the name?\r\n    const convertedArtifactArgumentSpec =\r\n      addMakeArtifactTaskAndGetArtifactArgumentSpec(\r\n        parameterArgumentSpec,\r\n        \"Make artifact\"\r\n      );\r\n    result = convertedArtifactArgumentSpec;\r\n    return result;\r\n  } else if (\"graphInput\" in taskArgument) {\r\n    // Workaround for root DAG where all inputs must be parameters\r\n    if (upstreamCannotBeArtifact) {\r\n      const parameterArgumentSpec: vertex.ParameterArgumentSpec = {\r\n        componentInputParameter: taskArgument.graphInput.inputName,\r\n      };\r\n      // We only need one task for each pipeline input parameter\r\n      const convertedArtifactArgumentSpec =\r\n        addMakeArtifactTaskAndGetArtifactArgumentSpec(\r\n          parameterArgumentSpec,\r\n          \"Make artifact for \" + taskArgument.graphInput.inputName\r\n        );\r\n      result = convertedArtifactArgumentSpec;\r\n    } else {\r\n      result = {\r\n        componentInputArtifact: taskArgument.graphInput.inputName,\r\n      };\r\n    }\r\n    return result;\r\n  } else if (\"taskOutput\" in taskArgument) {\r\n    result = {\r\n      taskOutputArtifact: {\r\n        producerTask: taskArgument.taskOutput.taskId,\r\n        outputArtifactKey: taskArgument.taskOutput.outputName,\r\n      },\r\n    };\r\n    return result;\r\n  } else {\r\n    throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n  }\r\n}\r\n\r\nconst assertDefined = <T>(obj: T | undefined) => {\r\n  if (obj === undefined) {\r\n    throw TypeError(\"Object is undefined\");\r\n  }\r\n  return obj;\r\n};\r\n\r\nconst transformRecordValues = <T1, T2>(\r\n  record: Record<string, T1>,\r\n  transform: (value: T1) => T2\r\n) =>\r\n  Object.fromEntries(\r\n    Object.entries(record).map(([key, value]) => [key, transform(value)])\r\n  );\r\n\r\nfunction buildVertexComponentSpecFromContainerComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string | undefined\r\n  ) => string\r\n) {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    throw Error(\"Only container components are supported by this function\");\r\n  }\r\n\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const resolvedCommandLine = resolveCommandLine(\r\n    componentSpec,\r\n    taskArguments,\r\n    inputsThatHaveParameterArguments\r\n  );\r\n\r\n  const vertexExecutorSpec: vertex.ExecutorSpec = {\r\n    container: {\r\n      image: containerSpec.image,\r\n      command: resolvedCommandLine.command,\r\n      args: resolvedCommandLine.args,\r\n    },\r\n  };\r\n\r\n  const vertexExecutorId = addExecutorAndGetId(\r\n    vertexExecutorSpec,\r\n    componentSpec.name ?? \"Component\"\r\n  );\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const vertexComponentInputsSpec: vertex.ComponentInputsSpec = {\r\n    parameters: Object.fromEntries(\r\n      Array.from(resolvedCommandLine.inputsConsumedAsParameter.values()).map(\r\n        (inputName) => [\r\n          inputName,\r\n          typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n        ]\r\n      )\r\n    ),\r\n    artifacts: Object.fromEntries(\r\n      Array.from(resolvedCommandLine.inputsConsumedAsArtifact.values()).map(\r\n        (inputName) => [\r\n          inputName,\r\n          typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type),\r\n        ]\r\n      )\r\n    ),\r\n  };\r\n\r\n  const vertexComponentOutputsSpec: vertex.ComponentOutputsSpec = {\r\n    parameters: {},\r\n    artifacts: Object.fromEntries(\r\n      (componentSpec.outputs ?? []).map((outputSpec) => [\r\n        outputSpec.name,\r\n        typeSpecToVertexArtifactSpec(outputSpec.type),\r\n      ])\r\n    ),\r\n  };\r\n\r\n  const vertexComponentSpec: vertex.ComponentSpec = {\r\n    inputDefinitions: vertexComponentInputsSpec,\r\n    outputDefinitions: vertexComponentOutputsSpec,\r\n    // dag\r\n    executorLabel: vertexExecutorId,\r\n  };\r\n  return vertexComponentSpec;\r\n}\r\n\r\nfunction buildVertexComponentSpecFromGraphComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addComponentAndGetId: (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix?: string\r\n  ) => string\r\n) {\r\n  if (!isGraphImplementation(componentSpec.implementation)) {\r\n    throw Error(\"Only graph components are supported by this function\");\r\n  }\r\n\r\n  const graphSpec = componentSpec.implementation.graph;\r\n\r\n  const inputsConsumedAsParameter = new Set<string>();\r\n  const inputsConsumedAsArtifact = new Set<string>();\r\n\r\n  let vertexTasks: Record<string, vertex.PipelineTaskSpec> = {};\r\n  const taskStringToTaskId = new Map<string, string>();\r\n\r\n  const addTaskAndGetId = (\r\n    task: vertex.PipelineTaskSpec,\r\n    namePrefix: string = \"Task\"\r\n  ) => {\r\n    const serializedSpec = JSON.stringify(task);\r\n    const existingId = taskStringToTaskId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(vertexTasks));\r\n    const id = makeNameUniqueByAddingIndex(namePrefix, usedIds);\r\n    taskStringToTaskId.set(serializedSpec, id);\r\n    vertexTasks[id] = task;\r\n    return id;\r\n  };\r\n\r\n  const addMakeArtifactTaskAndGetArtifactArgumentSpec = (\r\n    parameterArgumentSpec: vertex.ParameterArgumentSpec,\r\n    namePrefix: string = \"Make artifact\"\r\n  ) => {\r\n    // These system names are expected to not conflict with user task names\r\n    const makeArtifactExecutorId = addExecutorAndGetId(\r\n      makeArtifactExecutorSpec,\r\n      MAKE_ARTIFACT_EXECUTOR_ID\r\n    );\r\n    const makeArtifactComponentSpecCopy = {\r\n      ...makeArtifactComponentSpec,\r\n      executorLabel: makeArtifactExecutorId,\r\n    };\r\n    const makeArtifactComponentsId = addComponentAndGetId(\r\n      makeArtifactComponentSpecCopy,\r\n      MAKE_ARTIFACT_COMPONENT_ID\r\n    );\r\n    const makeArtifactTaskSpec = buildMakeArtifactTaskSpec(\r\n      parameterArgumentSpec\r\n    );\r\n    makeArtifactTaskSpec.componentRef.name = makeArtifactComponentsId;\r\n    const taskId = addTaskAndGetId(makeArtifactTaskSpec, namePrefix);\r\n    const artifactArgumentSpec: vertex.ArtifactArgumentSpec = {\r\n      taskOutputArtifact: {\r\n        producerTask: taskId,\r\n        outputArtifactKey: MAKE_ARTIFACT_OUTPUT_NAME,\r\n      },\r\n    };\r\n    return artifactArgumentSpec;\r\n  };\r\n\r\n  for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n    if (taskSpec.componentRef.spec === undefined) {\r\n      throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`);\r\n    }\r\n    try {\r\n      const vertexTaskSpec = buildVertexTaskSpecFromTaskSpec(\r\n        taskSpec.componentRef.spec,\r\n        taskSpec.arguments ?? {},\r\n        inputsThatHaveParameterArguments,\r\n        addExecutorAndGetId,\r\n        addComponentAndGetId,\r\n        addMakeArtifactTaskAndGetArtifactArgumentSpec\r\n      );\r\n      if (taskId in vertexTasks) {\r\n        throw Error(\r\n          `Task ID \"${taskId}\" is not unique. This cannot happen (unless user task ID clashes with special task ID).`\r\n        );\r\n      }\r\n      vertexTasks[taskId] = vertexTaskSpec;\r\n\r\n      for (const argument of Object.values(\r\n        vertexTaskSpec.inputs?.parameters ?? {}\r\n      )) {\r\n        if (argument.componentInputParameter !== undefined) {\r\n          inputsConsumedAsParameter.add(argument.componentInputParameter);\r\n        }\r\n      }\r\n      for (const argument of Object.values(\r\n        vertexTaskSpec.inputs?.artifacts ?? {}\r\n      )) {\r\n        if (\"componentInputArtifact\" in argument) {\r\n          inputsConsumedAsArtifact.add(argument.componentInputArtifact);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        err.message = `Error compiling task ${taskId}: ` + err.message;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Sanity checks\r\n  const inputNamesThatAreUsedBothAsParameterAndArtifact = Array.from(\r\n    inputsConsumedAsParameter\r\n  ).filter((x) => inputsConsumedAsArtifact.has(x));\r\n  if (inputNamesThatAreUsedBothAsParameterAndArtifact.length > 0) {\r\n    throw Error(\r\n      `Compiler error: Some inputs are used both as parameter and artifact: \"${inputNamesThatAreUsedBothAsParameterAndArtifact}\". Please file a bug report.`\r\n    );\r\n  }\r\n  const inputNamesThatAreParametersButAreConsumedAsArtifacts = Array.from(\r\n    inputsThatHaveParameterArguments\r\n  ).filter((x) => inputsConsumedAsArtifact.has(x));\r\n  if (inputNamesThatAreParametersButAreConsumedAsArtifacts.length > 0) {\r\n    throw Error(\r\n      `Compiler error: Some parameter inputs are consumer as artifact: \"${inputNamesThatAreParametersButAreConsumedAsArtifacts}\". Please file a bug report.`\r\n    );\r\n  }\r\n\r\n  const dagOutputArtifactSpecs = transformRecordValues(\r\n    graphSpec.outputValues ?? {},\r\n    (taskOutputArgument) => {\r\n      const result: vertex.DagOutputArtifactSpec = {\r\n        artifactSelectors: [\r\n          {\r\n            producerSubtask: taskOutputArgument.taskOutput.taskId,\r\n            outputArtifactKey: taskOutputArgument.taskOutput.outputName,\r\n          },\r\n        ],\r\n      };\r\n      return result;\r\n    }\r\n  );\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const vertexComponentInputsSpec: vertex.ComponentInputsSpec = {\r\n    parameters: Object.fromEntries(\r\n      Array.from(inputsConsumedAsParameter.values()).map((inputName) => [\r\n        inputName,\r\n        typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n      ])\r\n    ),\r\n    artifacts: Object.fromEntries(\r\n      Array.from(inputsConsumedAsArtifact.values()).map((inputName) => [\r\n        inputName,\r\n        typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type),\r\n      ])\r\n    ),\r\n  };\r\n\r\n  const vertexComponentOutputsSpec: vertex.ComponentOutputsSpec = {\r\n    // parameters: {},\r\n    artifacts: Object.fromEntries(\r\n      (componentSpec.outputs ?? []).map((outputSpec) => [\r\n        outputSpec.name,\r\n        typeSpecToVertexArtifactSpec(outputSpec.type),\r\n      ])\r\n    ),\r\n  };\r\n\r\n  const vertexComponentSpec: vertex.ComponentSpec = {\r\n    inputDefinitions: vertexComponentInputsSpec,\r\n    outputDefinitions: vertexComponentOutputsSpec,\r\n    dag: {\r\n      tasks: vertexTasks,\r\n      outputs: {\r\n        artifacts: dagOutputArtifactSpecs,\r\n        // parameters: {},\r\n      },\r\n    },\r\n  };\r\n  return vertexComponentSpec;\r\n}\r\n\r\nfunction buildVertexComponentSpecFromComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addComponentAndGetId: (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix?: string\r\n  ) => string\r\n) {\r\n  if (isContainerImplementation(componentSpec.implementation)) {\r\n    return buildVertexComponentSpecFromContainerComponentSpec(\r\n      componentSpec,\r\n      taskArguments,\r\n      inputsThatHaveParameterArguments,\r\n      addExecutorAndGetId\r\n    );\r\n  } else if (isGraphImplementation(componentSpec.implementation)) {\r\n    return buildVertexComponentSpecFromGraphComponentSpec(\r\n      componentSpec,\r\n      taskArguments,\r\n      inputsThatHaveParameterArguments,\r\n      addExecutorAndGetId,\r\n      addComponentAndGetId\r\n    );\r\n  } else {\r\n    throw Error(\r\n      `Unsupported component implementation kind: ${componentSpec.implementation}`\r\n    );\r\n  }\r\n}\r\n\r\nconst buildVertexTaskSpecFromTaskSpec = (\r\n  componentSpec: ComponentSpec,\r\n  //passedArgumentNames: string[],\r\n  taskArguments: Record<string, ArgumentType>,\r\n  graphInputsWithParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addComponentAndGetId: (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addMakeArtifactTaskAndGetArtifactArgumentSpec: (\r\n    parameterArgumentSpec: vertex.ParameterArgumentSpec,\r\n    namePrefix?: string\r\n  ) => vertex.ArtifactArgumentSpec\r\n) => {\r\n  // So-called \"parameter\" arguments can either be constant arguments\r\n  // or come from the arguments to the graph component of the current task.\r\n  // In the current implementation the parameter arguments cannot come from task outputs since all task outputs are artifacts.\r\n  const inputsThatHaveParameterArguments = new Set(\r\n    (componentSpec.inputs ?? [])\r\n      .map((inputSpec) => inputSpec.name)\r\n      .filter((inputName) => {\r\n        const taskArgument = taskArguments[inputName];\r\n        if (taskArgument === undefined) {\r\n          // Missing arguments fall back to default values which are constant strings which are parameters.\r\n          return true;\r\n        }\r\n        if (typeof taskArgument === \"string\") {\r\n          return true;\r\n        }\r\n        if (\"graphInput\" in taskArgument) {\r\n          if (\r\n            graphInputsWithParameterArguments.has(\r\n              taskArgument.graphInput.inputName\r\n            )\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      })\r\n  );\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const vertexComponentSpec: vertex.ComponentSpec =\r\n    buildVertexComponentSpecFromComponentSpec(\r\n      componentSpec,\r\n      taskArguments,\r\n      inputsThatHaveParameterArguments,\r\n      addExecutorAndGetId,\r\n      addComponentAndGetId\r\n    );\r\n\r\n  const vertexComponentId = addComponentAndGetId(\r\n    vertexComponentSpec,\r\n    componentSpec.name ?? \"Component\"\r\n  );\r\n\r\n  const vertexTaskParameterArguments = Object.fromEntries(\r\n    Object.keys(vertexComponentSpec.inputDefinitions?.parameters ?? {}).map(\r\n      (inputName) => [\r\n        inputName,\r\n        buildVertexParameterArgumentSpec(\r\n          taskArguments[inputName],\r\n          assertDefined(inputMap.get(inputName))\r\n        ),\r\n      ]\r\n    )\r\n  );\r\n\r\n  const vertexTaskArtifactArguments = Object.fromEntries(\r\n    Object.keys(vertexComponentSpec.inputDefinitions?.artifacts ?? {}).map(\r\n      (inputName) => [\r\n        inputName,\r\n        buildVertexArtifactArgumentSpec(\r\n          taskArguments[inputName],\r\n          assertDefined(inputMap.get(inputName)),\r\n          inputsThatHaveParameterArguments.has(inputName),\r\n          addMakeArtifactTaskAndGetArtifactArgumentSpec\r\n        ),\r\n      ]\r\n    )\r\n  );\r\n\r\n  const vertexTaskSpec: vertex.PipelineTaskSpec = {\r\n    taskInfo: {\r\n      // This is the task display name, not an ID\r\n      name: componentSpec.name ?? \"Component\",\r\n    },\r\n    inputs: {\r\n      parameters: vertexTaskParameterArguments,\r\n      artifacts: vertexTaskArtifactArguments,\r\n    },\r\n    // dependent_tasks: [],\r\n    cachingOptions: {\r\n      enableCache: true,\r\n    },\r\n    componentRef: {\r\n      name: vertexComponentId,\r\n    },\r\n    // triggerPolicy: {\r\n    //     condition: \"...\",\r\n    //     strategy: \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n    // },\r\n    // iterator: {\r\n    //     artifactIterator: {...},\r\n    //     parameterIterator: {...},\r\n    // },\r\n  };\r\n\r\n  return vertexTaskSpec;\r\n};\r\n\r\nconst makeNameUniqueByAddingIndex = (\r\n  name: string,\r\n  existingNames: Set<string>\r\n): string => {\r\n  let finalName = name;\r\n  let index = 1;\r\n  while (existingNames.has(finalName)) {\r\n    index++;\r\n    finalName = name + \" \" + index.toString();\r\n  }\r\n  return finalName;\r\n};\r\n\r\nexport const graphComponentSpecToVertexPipelineSpec = (\r\n  componentSpec: ComponentSpec,\r\n  pipelineContextName = \"pipeline\"\r\n) => {\r\n  let vertexExecutors: Record<string, vertex.ExecutorSpec> = {};\r\n  const executorStringToExecutorId = new Map<string, string>();\r\n  let vertexComponents: Record<string, vertex.ComponentSpec> = {};\r\n  const componentStringToComponentId = new Map<string, string>();\r\n\r\n  const addExecutorAndGetId = (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix: string = \"Executor\"\r\n  ) => {\r\n    const serializedSpec = JSON.stringify(executor);\r\n    const existingId = executorStringToExecutorId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(vertexExecutors));\r\n    const id = makeNameUniqueByAddingIndex(namePrefix, usedIds);\r\n    executorStringToExecutorId.set(serializedSpec, id);\r\n    vertexExecutors[id] = executor;\r\n    return id;\r\n  };\r\n\r\n  const addComponentAndGetId = (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix: string = \"Component\"\r\n  ) => {\r\n    const serializedSpec = JSON.stringify(component);\r\n    const existingId = componentStringToComponentId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(vertexComponents));\r\n    const id = makeNameUniqueByAddingIndex(namePrefix, usedIds);\r\n    componentStringToComponentId.set(serializedSpec, id);\r\n    vertexComponents[id] = component;\r\n    return id;\r\n  };\r\n\r\n  // All root graph inputs are parameters\r\n  const graphInputsWithParameterArguments = new Set(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => inputSpec.name)\r\n  );\r\n\r\n  const pipelineArguments: Record<string, ArgumentType> = Object.fromEntries(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => {\r\n      const argument: ArgumentType = {\r\n        graphInput: { inputName: inputSpec.name },\r\n      };\r\n      return [inputSpec.name, argument];\r\n    })\r\n  );\r\n  const pipelineComponentSpec = buildVertexComponentSpecFromComponentSpec(\r\n    componentSpec,\r\n    pipelineArguments,\r\n    graphInputsWithParameterArguments,\r\n    addExecutorAndGetId,\r\n    addComponentAndGetId\r\n  );\r\n\r\n  const vertexPipelineSpec: vertex.PipelineSpec = {\r\n    pipelineInfo: {\r\n      name: sanitizePipelineInfoName(pipelineContextName),\r\n    },\r\n    sdkVersion: \"Cloud-Pipelines\",\r\n    schemaVersion: \"2.0.0\",\r\n    deploymentSpec: {\r\n      executors: vertexExecutors,\r\n    },\r\n    components: vertexComponents,\r\n    root: pipelineComponentSpec,\r\n  };\r\n  return vertexPipelineSpec;\r\n};\r\n\r\nexport const generateVertexPipelineJobFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  gcsOutputDirectory: string,\r\n  pipelineArguments?: Map<string, string>,\r\n  pipelineContextName = \"pipeline\"\r\n) => {\r\n  // The pipelineContextName affects caching\r\n\r\n  const pipelineSpec = graphComponentSpecToVertexPipelineSpec(\r\n    componentSpec,\r\n    pipelineContextName\r\n  );\r\n  const inputParameterDefinitions =\r\n    (pipelineSpec.root.inputDefinitions ?? {}).parameters ?? {};\r\n\r\n  let convertedPipelineArguments: Record<string, any> = {};\r\n  if (pipelineArguments !== undefined) {\r\n    for (const [key, value] of Array.from(pipelineArguments.entries())) {\r\n      convertedPipelineArguments[key] = stringToMlmdValue(\r\n        value,\r\n        inputParameterDefinitions[key].type\r\n      );\r\n    }\r\n  }\r\n\r\n  const pipelineJob: vertex.PipelineJob = {\r\n    // name: \"<>\",\r\n    // Does not show up in the UX\r\n    displayName: componentSpec.name ?? \"Pipeline\",\r\n    // labels: {},\r\n    runtimeConfig: {\r\n      parameters: convertedPipelineArguments,\r\n      gcsOutputDirectory: gcsOutputDirectory,\r\n    },\r\n    pipelineSpec: pipelineSpec,\r\n    // encryptionSpec: {},\r\n    // serviceAccount: \"<>\",\r\n    // network: {},\r\n  };\r\n  return pipelineJob;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { DragEvent } from 'react';\r\n\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport ComponentSearch from './ComponentSearch'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport GoogleCloudSubmitter from './GoogleCloud'\r\nimport VertexAiExporter from './VertexAiExporter'\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport UserComponentLibrary from \"./UserComponentLibrary\";\r\nimport PipelineLibrary from \"./PipelineLibrary\";\r\nimport { componentLibraryUrl } from '../appSettings';\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ninterface SidebarProps {\r\n  componentSpec?: ComponentSpec,\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst Sidebar = ({\r\n  componentSpec,\r\n  setComponentSpec\r\n}: SidebarProps) => {\r\n  // Do not include the DebugScratch in the production build\r\n  let DebugScratchElement = () => null;\r\n  if (process?.env?.NODE_ENV === \"development\") {\r\n    try {\r\n      const DebugScratch = require(\"./DebugScratch\").default;\r\n      DebugScratchElement = () =>\r\n        DebugScratch({\r\n          componentSpec: componentSpec,\r\n          setComponentSpec: setComponentSpec,\r\n        });\r\n    } catch (e) {}\r\n  }\r\n\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Save/Load pipeline</summary>\r\n        <PipelineLibrary componentSpec={componentSpec} setComponentSpec={setComponentSpec}/>\r\n      </details>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Submit to Google Cloud</summary>\r\n        <GoogleCloudSubmitter componentSpec={componentSpec}/>\r\n      </details>\r\n      <h3>Drag components to the canvas:</h3>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary><strong>Special</strong></summary>\r\n        <div className=\"react-flow__node react-flow__node-input sidebar-node\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input\" } })} draggable>\r\n          Input\r\n        </div>\r\n        <div className=\"react-flow__node react-flow__node-output sidebar-node\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output\" } })} draggable>\r\n          Output\r\n        </div>\r\n      </details>\r\n      <ComponentLibrary url={componentLibraryUrl} />\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>User components</summary>\r\n        <UserComponentLibrary/>\r\n      </details>\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Component search</summary>\r\n        <ComponentSearch />\r\n      </details>\r\n      <details>\r\n        <summary>Debug</summary>\r\n        {componentSpec && <GraphComponentExporter componentSpec={componentSpec}/>}\r\n        {componentSpec && <VertexAiExporter componentSpec={componentSpec}/>}\r\n        <DebugScratchElement/>\r\n      </details>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\nimport { httpGetWithCache } from \"../cacheUtils\";\r\nimport { ComponentReference, ComponentSpec } from \"../componentSpec\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\ntype ComponentLibraryFolder = {\r\n  name: string;\r\n  folders: ComponentLibraryFolder[];\r\n  components: ComponentReference[];\r\n};\r\n\r\ntype ComponentLibraryStruct = {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  folders: ComponentLibraryFolder[];\r\n};\r\n\r\nexport const isValidComponentLibraryStruct = (\r\n  obj: object\r\n): obj is ComponentLibraryStruct => \"folders\" in obj;\r\n\r\nconst DraggableComponentRow = ({ componentUrl }: { componentUrl: string }) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(\r\n    undefined\r\n  );\r\n  useEffect(() => {\r\n    // TODO: Validate the component\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <DraggableComponent\r\n        componentReference={{\r\n          url: componentUrl,\r\n          spec: componentSpec,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nconst SingleFolderVis = ({\r\n  folder,\r\n  isOpen = false,\r\n}: {\r\n  folder: ComponentLibraryFolder;\r\n  isOpen?: boolean;\r\n}) => {\r\n  return (\r\n    <details\r\n      key={folder.name}\r\n      open={isOpen}\r\n      style={{\r\n        border: \"1px solid #aaa\",\r\n        borderRadius: \"4px\",\r\n        padding: \"4px\",\r\n        paddingLeft: \"10px\",\r\n      }}\r\n    >\r\n      <summary style={{ borderWidth: \"1px\", padding: \"4px\" }}>\r\n        <strong>{folder.name}</strong>\r\n      </summary>\r\n      {folder.folders &&\r\n        Array.from(folder.folders).map((componentFolder, index) => (\r\n          <SingleFolderVis\r\n            key={componentFolder.name}\r\n            folder={componentFolder}\r\n            isOpen={isOpen && index === 0}\r\n          />\r\n        ))}\r\n      {folder.components &&\r\n        Array.from(folder.components).map(\r\n          (componentReference) =>\r\n            componentReference.url && (\r\n              <DraggableComponentRow\r\n                key={componentReference.url}\r\n                componentUrl={componentReference.url}\r\n              />\r\n            )\r\n        )}\r\n    </details>\r\n  );\r\n};\r\n\r\nconst ComponentLibraryVisFromStruct = ({\r\n  componentLibraryStruct,\r\n}: {\r\n  componentLibraryStruct?: ComponentLibraryStruct;\r\n}) => {\r\n  return (\r\n    <details open>\r\n      <summary\r\n        style={{\r\n          border: \"1px solid #aaa\",\r\n          padding: \"4px\",\r\n          borderRadius: \"4px\",\r\n        }}\r\n      >\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        {componentLibraryStruct &&\r\n          Array.from(componentLibraryStruct.folders).map(\r\n            (componentFolder, index) => (\r\n              <SingleFolderVis\r\n                key={componentFolder.name}\r\n                folder={componentFolder}\r\n                isOpen={index === 0}\r\n              />\r\n            )\r\n          )}\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nconst loadComponentLibraryStruct = async (url: string) => {\r\n  const response = await httpGetWithCache(url, \"cache\", true);\r\n  const data = await response.arrayBuffer();\r\n  const componentLibrary = yaml.load(new TextDecoder().decode(data));\r\n  if (typeof componentLibrary !== \"object\" || componentLibrary === null) {\r\n    throw Error(\r\n      `Component library data is not a YAML-encoded object: ${componentLibrary}`\r\n    );\r\n  }\r\n  if (!isValidComponentLibraryStruct(componentLibrary)) {\r\n    throw Error(\r\n      `Invalid Component library data structure: ${componentLibrary}`\r\n    );\r\n  }\r\n  return componentLibrary;\r\n};\r\n\r\nconst ComponentLibraryVisFromUrl = ({ url }: { url: string }) => {\r\n  const [componentLibraryStruct, setComponentLibraryStruct] =\r\n    useState<ComponentLibraryStruct>();\r\n\r\n  useEffect(() => {\r\n    if (componentLibraryStruct === undefined) {\r\n      (async () => {\r\n        const loadedComponentLibrary = await loadComponentLibraryStruct(url);\r\n        setComponentLibraryStruct(loadedComponentLibrary);\r\n      })();\r\n    }\r\n  }, [componentLibraryStruct, url]);\r\n\r\n  return componentLibraryStruct === undefined ? null : (\r\n    <ComponentLibraryVisFromStruct\r\n      componentLibraryStruct={componentLibraryStruct}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ComponentLibraryVisFromUrl;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useState } from \"react\";\r\nimport { ComponentReference } from \"../componentSpec\";\r\nimport {\r\n  isComponentDbEmpty,\r\n  refreshComponentDb,\r\n  searchComponentsByName,\r\n} from \"../github\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\nimport { componentSearchConfig } from \"../appSettings\";\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    // If the DB is populated, return results immediately, then refresh the DB and update the results.\r\n    try {\r\n      if (!(await isComponentDbEmpty())) {\r\n        const componentRefs = await searchComponentsByName(query);\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      } else {\r\n        console.debug(\"Component DB is empty. Need to populate the DB first.\");\r\n      }\r\n      await refreshComponentDb(componentSearchConfig);\r\n      setIsLoaded(true);\r\n      const componentRefs = await searchComponentsByName(query);\r\n      setItems(componentRefs);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n    (window as any).gtag?.(\"event\", \"ComponentSearch_search\", {});\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((componentRef) => (\r\n      <DraggableComponent\r\n        key={componentRef.digest ?? componentRef.url}\r\n        componentReference={componentRef}\r\n      />\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from './GraphComponentSpecFlow'\r\nimport { componentSpecToYaml } from \"../componentStore\";\r\n\r\ninterface GraphComponentExporterProps {\r\n  componentSpec: ComponentSpec,\r\n}\r\n\r\nconst GraphComponentExporter = ({\r\n  componentSpec,\r\n}: GraphComponentExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    const graphComponent = augmentComponentSpec(componentSpec, nodes, false, true);\r\n    componentText = componentSpecToYaml(graphComponent);\r\n  } catch(err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\n/* global gapi */\r\n\r\nimport { useState } from 'react';\r\n\r\nimport { ArgumentType, ComponentSpec } from '../componentSpec';\r\nimport {generateVertexPipelineJobFromGraphComponent} from './vertexAiCompiler'\r\nimport ArgumentsEditor from \"./ArgumentsEditor\";\r\nimport { PipelineJob } from './vertexPipelineSpec';\r\nimport { googleCloudOAuthClientId } from '../appSettings';\r\n\r\nconst LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY = \"GoogleCloudSubmitter/gcsOutputDirectory\";\r\nconst LOCAL_STORAGE_PROJECT_ID_KEY = \"GoogleCloudSubmitter/projectId\";\r\nconst LOCAL_STORAGE_REGION_KEY = \"GoogleCloudSubmitter/region\";\r\nconst LOCAL_STORAGE_PROJECT_IDS_KEY = \"GoogleCloudSubmitter/projectIds\";\r\n\r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'us-east1',\r\n  'us-west1',\r\n  'europe-west1',\r\n  'europe-west2',\r\n  'europe-west4',\r\n  'asia-east1',\r\n  'asia-southeast1',\r\n  'northamerica-northeast1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n  clientId: string = googleCloudOAuthClientId,\r\n) => {\r\n  return new Promise<GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n            // Working around the Google Auth bug: The request succeeds, but the returned token does not have the requested scopes.\r\n            // See https://github.com/google/google-api-javascript-client/issues/743\r\n            const receivedScopesString = (authResult as any).scope as string | undefined;\r\n            const receivedScopes = receivedScopesString?.split(\" \");\r\n            if (receivedScopes === undefined || !scopes.every((scope) => receivedScopes.includes(scope))) {\r\n              const errorMessage = `Authorization call succeeded, but the returned scopes are ${receivedScopesString}`;\r\n              console.error(errorMessage);\r\n              reject(errorMessage);\r\n            } else {\r\n              resolve(authResult);\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nconst ensureGoogleCloudAuthorizesScopes = async (scopes: string[]) => {\r\n  try {\r\n    // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    await authorizeGoogleCloudClient(scopes, true);\r\n    // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n      result: \"succeeded\",\r\n      immediate: \"true\"\r\n    });\r\n  } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      await authorizeGoogleCloudClient(scopes, false);\r\n      (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n        result: \"succeeded\",\r\n        immediate: \"false\"\r\n      });\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n      (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n        result: \"failed\",\r\n        immediate: \"false\"\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformCreatePipelineJob = async (projectId: string, region='us-central1', pipelineJob: Record<string, any>) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://${region}-aiplatform.googleapis.com/v1beta1/projects/${projectId}/locations/${region}/pipelineJobs`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(pipelineJob),\r\n  });\r\n  (window as any).gtag?.(\"event\", \"GoogleCloud_submit_pipeline_job\", {\r\n    result: \"succeeded\"\r\n  });\r\n  return response.result;\r\n}\r\n\r\ninterface GoogleCloudSubmitterProps {\r\n  componentSpec?: ComponentSpec,\r\n};\r\n\r\nconst GoogleCloudSubmitter = ({\r\n  componentSpec,\r\n}: GoogleCloudSubmitterProps) => {\r\n  const [projects, setProjects] = useState<string[]>(\r\n    () => JSON.parse(window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_IDS_KEY) ?? \"[]\")\r\n  );\r\n  const [project, setProject] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_ID_KEY) ?? \"\"\r\n  ); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_REGION_KEY) ?? VERTEX_AI_PIPELINES_DEFAULT_REGION\r\n  );\r\n  const [error, setError] = useState(\"\");\r\n  const [gcsOutputDirectory, setGcsOutputDirectory] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY) ?? \"\"\r\n  );\r\n  const [pipelineJobWebUrl, setPipelineJobWebUrl] = useState(\"\");\r\n  const [compilationError, setCompilationError] = useState(\"\");\r\n  const [componentArguments, setComponentArguments] = useState<Record<string, ArgumentType>>({});\r\n\r\n  let vertexPipelineJobJson: string | undefined = undefined;\r\n  let vertexPipelineJob: PipelineJob | undefined = undefined;\r\n\r\n  //useEffect(() => {\r\n  if (componentSpec !== undefined) {\r\n    const defaultInputValues = Object.fromEntries(\r\n      (componentSpec.inputs ?? [])\r\n        .filter((inputSpec) => inputSpec.default !== undefined)\r\n        .map((inputSpec) => [inputSpec.name, String(inputSpec.default)])\r\n    );\r\n    const pipelineArguments = {\r\n      ...defaultInputValues,\r\n      ...componentArguments,\r\n    };\r\n    const pipelineArgumentMap = new Map(\r\n      Object.entries(pipelineArguments).filter(\r\n        // Type guard predicate\r\n        (pair): pair is [string, string] => typeof pair[1] === \"string\"\r\n      )\r\n    );\r\n    try {\r\n      vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(\r\n        componentSpec,\r\n        gcsOutputDirectory,\r\n        pipelineArgumentMap\r\n      );\r\n      vertexPipelineJob.labels = {\r\n        \"sdk\": \"cloud-pipelines-editor\",\r\n        \"cloud-pipelines-editor-version\": \"0-0-1\",\r\n      };\r\n      vertexPipelineJobJson = JSON.stringify(vertexPipelineJob, undefined, 2);\r\n      // Prevent infinite re-renders\r\n      if (compilationError !== \"\") {\r\n        setCompilationError(\"\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.toString();\r\n      // Prevent infinite re-renders\r\n      if (errorMessage !== compilationError) {\r\n        setCompilationError(err.toString());\r\n      }\r\n    }\r\n  }\r\n  //}, [componentSpec, gcsOutputDirectory]);\r\n\r\n  const vertexPipelineJobUrl = vertexPipelineJobJson && URL.createObjectURL(\r\n    new Blob([vertexPipelineJobJson], { type: \"application/json\" })\r\n  );\r\n\r\n  const readyToSubmit =\r\n    project !== \"\" && region !== \"\" && vertexPipelineJob !== undefined;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        if (vertexPipelineJob === undefined) {\r\n          return;\r\n        }\r\n        setPipelineJobWebUrl(\"\");\r\n        try {\r\n          // setItem might throw exception on iOS in incognito mode\r\n          try {\r\n            window.localStorage?.setItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY, gcsOutputDirectory);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_ID_KEY, project);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_REGION_KEY, region);\r\n          } catch(err) {\r\n            console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n          }\r\n          const result = await aiplatformCreatePipelineJob(project, region, vertexPipelineJob);\r\n          const pipelineJobName: string = result.name;\r\n          const pipelineJobId = pipelineJobName.split('/').slice(-1)[0];\r\n          const pipelineJobWebUrl = `https://console.cloud.google.com/vertex-ai/locations/${region}/pipelines/runs/${pipelineJobId}?project=${project}`;\r\n          setPipelineJobWebUrl(pipelineJobWebUrl);\r\n          setError(\"\");\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n          (window as any).gtag?.(\"event\", \"GoogleCloud_submit_pipeline_job\", {\r\n            result: \"failed\"\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      {componentSpec === undefined ||\r\n      (componentSpec?.inputs?.length ?? 0) === 0 ? undefined : (\r\n        <fieldset\r\n          style={{\r\n            // Reduce the default padding\r\n            padding: \"2px\",\r\n          }}\r\n        >\r\n          <legend>Arguments</legend>\r\n          <ArgumentsEditor\r\n            componentSpec={componentSpec}\r\n            componentArguments={componentArguments}\r\n            setComponentArguments={setComponentArguments}\r\n            shrinkToWidth={true}\r\n          />\r\n        </fieldset>\r\n      )}\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          type=\"button\" // The default button type is \"submit\", not \"button\". WTF!?\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects();\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n              try {\r\n                window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_IDS_KEY, JSON.stringify(projectIds));\r\n              } catch(err) {\r\n                console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n              }\r\n              (window as any).gtag?.(\"event\", \"GoogleCloud_list_projects\", { result: \"succeeded\" });\r\n            } catch (err) {\r\n              setError(err?.result?.error?.message ?? \"Error\");\r\n              (window as any).gtag?.(\"event\", \"GoogleCloud_list_projects\", { result: \"failed\" });\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"region\">GCS dir: </label>\r\n        <input\r\n          id=\"gcsOutputDirectory\"\r\n          required\r\n          type=\"text\"\r\n          value={gcsOutputDirectory}\r\n          onChange={(e) => setGcsOutputDirectory(e.target.value)}\r\n        />\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <input\r\n          type=\"submit\"\r\n          disabled={!readyToSubmit}\r\n          value=\"Submit pipeline job\"\r\n        />\r\n        {pipelineJobWebUrl !== \"\" && <a href={pipelineJobWebUrl} target=\"_blank\" rel=\"noreferrer\" style={{ margin: \"5px\" }}>Job</a>}\r\n      </div>\r\n      {vertexPipelineJobUrl !== undefined && (\r\n        <div\r\n          style={{\r\n            margin: \"5px\",\r\n          }}\r\n        >\r\n          Or download the{\" \"}\r\n          <a href={vertexPipelineJobUrl} download={\"vertex_pipeline_job.json\"}>\r\n            pipeline_job.json\r\n          </a>{\" \"}\r\n          file, then go to{\" \"}\r\n          <a href=\"https://console.cloud.google.com/vertex-ai/pipelines\">\r\n            Vertex Pipelines\r\n          </a>{\" \"}\r\n          and{\" \"}\r\n          <a href=\"https://cloud.google.com/vertex-ai/docs/pipelines/run-pipeline#console\">\r\n            create a new run\r\n          </a>\r\n          .\r\n        </div>\r\n      )}\r\n      {compilationError !== \"\" && <div>{compilationError}</div>}\r\n      {error !== \"\" && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\nimport {graphComponentSpecToVertexPipelineSpec} from './vertexAiCompiler'\r\n\r\ninterface VertexAiExporterProps {\r\n  componentSpec: ComponentSpec;\r\n}\r\n\r\nconst VertexAiExporter = ({componentSpec}: VertexAiExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let vertexPipelineSpecText = \"\";\r\n  try {\r\n    // Augmenting the componentSpec might be useless right now, but it can stabilize the output (e.g. ordering).\r\n    // Also, in the future, the original spec might be included in the vertexPipelineSpec\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    const vertexPipelineSpec = graphComponentSpecToVertexPipelineSpec(componentSpec);\r\n    vertexPipelineSpecText = JSON.stringify(vertexPipelineSpec, undefined, 2);\r\n  } catch(err) {\r\n    vertexPipelineSpecText = String(err);\r\n  }\r\n\r\n  const vertexPipelineSpecTextBlob = new Blob([vertexPipelineSpecText], { type: \"application/json\" }); // Or application/x-yaml (which leads to downloading)\r\n  // TODO: Call vertexPipelineSpecTextBlobUrl.revokeObjectURL in the future\r\n  const vertexPipelineSpecTextBlobUrl = URL.createObjectURL(vertexPipelineSpecTextBlob);\r\n\r\n  return (\r\n    <details>\r\n      <summary>\r\n        Cloud IR <a\r\n          href={vertexPipelineSpecTextBlobUrl}\r\n          download={\"vertex_pipeline_spec.json\"}\r\n        >\r\n          vertex_pipeline_spec.json\r\n        </a>\r\n      </summary>\r\n      <pre style={{ overflow: \"auto\" }}>{vertexPipelineSpecText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default VertexAiExporter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport {\r\n  addComponentToListByText,\r\n  deleteComponentFileFromList,\r\n  ComponentFileEntry,\r\n  getAllComponentFilesFromList,\r\n  addComponentToListByUrl,\r\n} from \"../componentStore\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\nconst USER_COMPONENTS_LIST_NAME = \"user_components\";\r\n\r\nconst UserComponentLibrary = () => {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [componentFiles, setComponentFiles] = useState(\r\n    new Map<string, ComponentFileEntry>()\r\n  );\r\n  const [contextMenuFileName, setContextMenuFileName] = useState<string>();\r\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<HTMLElement>();\r\n  const [isImportComponentDialogOpen, setIsImportComponentDialogOpen] =\r\n    useState(false);\r\n\r\n  const refreshComponents = useCallback(() => {\r\n    getAllComponentFilesFromList(USER_COMPONENTS_LIST_NAME).then(\r\n      setComponentFiles\r\n    );\r\n  }, [setComponentFiles]);\r\n\r\n  useEffect(refreshComponents, [refreshComponents]);\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = async () => {\r\n        const binaryStr = reader.result;\r\n        if (binaryStr === null || binaryStr === undefined) {\r\n          console.error(`Dropped file reader result was ${binaryStr}`);\r\n          return;\r\n        }\r\n        try {\r\n          const componentRefPlusData = await addComponentToListByText(\r\n            USER_COMPONENTS_LIST_NAME,\r\n            binaryStr,\r\n          );\r\n          const componentRef = componentRefPlusData.componentRef;\r\n          console.debug(\"storeComponentText succeeded\", componentRef);\r\n          (window as any).gtag?.(\"event\", \"UserComponents_component_import\", {\r\n            result: \"succeeded\",\r\n          });\r\n          setErrorMessage(\"\");\r\n          refreshComponents();\r\n        } catch (err) {\r\n          setErrorMessage(\r\n            `Error parsing the dropped file as component: ${err.toString()}.`\r\n          );\r\n          console.error(\"Error parsing the dropped file as component\", err);\r\n          (window as any).gtag?.(\"event\", \"UserComponents_component_import\", {\r\n            result: \"failed\",\r\n          });\r\n        }\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }, [refreshComponents]);\r\n\r\n  const onImportFromUrl = useCallback(\r\n    async (url: string) => {\r\n      try {\r\n        const componentFileEntry = await addComponentToListByUrl(\r\n          USER_COMPONENTS_LIST_NAME,\r\n          url\r\n        );\r\n        const componentRef = componentFileEntry.componentRef;\r\n        console.debug(\"addComponentToListByUrl succeeded\", componentRef);\r\n        (window as any).gtag?.(\r\n          \"event\",\r\n          \"UserComponents_component_import_from_url_succeeded\"\r\n        );\r\n        setErrorMessage(\"\");\r\n        refreshComponents();\r\n        setIsImportComponentDialogOpen(false);\r\n      } catch (err) {\r\n        setErrorMessage(\r\n          `Error parsing the file as component: ${err.toString()}.`\r\n        );\r\n        console.error(\"Error importing component from the URL\", err);\r\n        (window as any).gtag?.(\r\n          \"event\",\r\n          \"UserComponents_component_import_from_url_failed\"\r\n        );\r\n      }\r\n    },\r\n    [refreshComponents]\r\n  );\r\n\r\n  const handleContextMenuDelete = async () => {\r\n    if (contextMenuFileName) {\r\n      setContextMenuFileName(undefined);\r\n      await deleteComponentFileFromList(\r\n        USER_COMPONENTS_LIST_NAME,\r\n        contextMenuFileName\r\n      );\r\n      refreshComponents();\r\n    }\r\n  };\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept: \".yaml\",\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={(e) => setIsImportComponentDialogOpen(true)}\r\n        style={{ marginBottom: \"4px\" }}\r\n      >\r\n        Import from URL\r\n      </button>\r\n      <div {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n        <div\r\n          style={{\r\n            border: \"1px solid black\",\r\n            padding: \"4px\",\r\n            minHeight: \"3em\",\r\n          }}\r\n        >\r\n          {isDragActive\r\n            ? \"Drop the files here ...\"\r\n            : errorMessage ||\r\n              \"Drag and drop component.yaml files or click to select files\"}\r\n          {Array.from(componentFiles.entries()).map(([fileName, fileEntry]) => (\r\n            <DraggableComponent\r\n              key={fileName}\r\n              componentReference={fileEntry.componentRef}\r\n              onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                setContextMenuAnchor(e.currentTarget);\r\n                setContextMenuFileName(fileName);\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <Menu\r\n        open={contextMenuFileName !== undefined}\r\n        anchorEl={contextMenuAnchor}\r\n        onClose={() => {\r\n          setContextMenuFileName(undefined);\r\n        }}\r\n      >\r\n        <MenuItem dense={true} onClick={handleContextMenuDelete}>\r\n          Delete\r\n        </MenuItem>\r\n      </Menu>\r\n      <ImportComponentFromUrlDialog\r\n        isOpen={isImportComponentDialogOpen}\r\n        onCancel={() => setIsImportComponentDialogOpen(false)}\r\n        initialValue={\"https://raw.githubusercontent.com/.../component.yaml\"}\r\n        onImport={onImportFromUrl}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserComponentLibrary;\r\n\r\ninterface SaveAsDialogProps {\r\n  isOpen: boolean;\r\n  onImport: (name: string) => void;\r\n  onCancel: () => void;\r\n  initialValue: string | undefined;\r\n}\r\n\r\nconst ImportComponentFromUrlDialog = ({\r\n  isOpen,\r\n  onImport,\r\n  onCancel,\r\n  initialValue,\r\n}: SaveAsDialogProps) => {\r\n  const urlInputRef = useRef<HTMLInputElement>();\r\n  return (\r\n    <Dialog open={isOpen} fullWidth>\r\n      <DialogTitle>{\"Import component\"}</DialogTitle>\r\n      <form\r\n        onSubmit={(e) => {\r\n          if (urlInputRef.current) {\r\n            onImport(urlInputRef.current.value);\r\n          }\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <DialogContent>\r\n          <TextField\r\n            id=\"name\"\r\n            type=\"text\"\r\n            placeholder={initialValue}\r\n            label=\"Component URL\"\r\n            inputRef={urlInputRef}\r\n            required\r\n            autoFocus\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={onCancel}>Cancel</Button>\r\n          <Button color=\"primary\" type=\"submit\" autoFocus>\r\n            Import\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useStoreState } from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { componentSpecToYaml } from \"../componentStore\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\n\r\ninterface GraphComponentLinkProps {\r\n  componentSpec: ComponentSpec;\r\n  downloadFileName?: string;\r\n  linkText?: string;\r\n  linkRef?: React.Ref<HTMLAnchorElement>;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nconst GraphComponentLink = ({\r\n  componentSpec,\r\n  downloadFileName = \"component.yaml\",\r\n  linkText = \"component.yaml\",\r\n  linkRef,\r\n  style,\r\n}: GraphComponentLinkProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  try {\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, false, true);\r\n  } catch (err) {\r\n    if (err?.message?.startsWith(\"The nodes array does not\") !== true) {\r\n      console.error(err);\r\n      return <>err.toString()</>;\r\n    }\r\n  }\r\n  const componentText = componentSpecToYaml(componentSpec);\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  return (\r\n    <a\r\n      ref={linkRef}\r\n      href={URL.createObjectURL(componentTextBlob)}\r\n      download={downloadFileName}\r\n      style={style}\r\n    >\r\n      {linkText}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default GraphComponentLink;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { pipelineLibraryUrl } from \"../appSettings\";\r\nimport { httpGetWithCache } from \"../cacheUtils\";\r\nimport { ComponentReference, ComponentSpec } from \"../componentSpec\";\r\nimport {\r\n  storeComponentFromUrl,\r\n  ComponentReferenceWithSpec,\r\n} from \"../componentStore\";\r\nimport { preloadComponentReferences } from \"./samplePipelines\";\r\n\r\ntype PipelineLibraryStruct = {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  components: ComponentReference[];\r\n};\r\n\r\nconst isValidPipelineLibraryStruct = (\r\n  obj: object\r\n): obj is PipelineLibraryStruct => \"components\" in obj;\r\n\r\nconst loadPipelineLibraryStruct = async (url: string) => {\r\n  const response = await httpGetWithCache(url, \"cache\", true);\r\n  const data = await response.arrayBuffer();\r\n  const pipelineLibrary = yaml.load(new TextDecoder().decode(data));\r\n  if (typeof pipelineLibrary !== \"object\" || pipelineLibrary === null) {\r\n    throw Error(\r\n      `Component library data is not a YAML-encoded object: ${pipelineLibrary}`\r\n    );\r\n  }\r\n  if (!isValidPipelineLibraryStruct(pipelineLibrary)) {\r\n    throw Error(`Invalid Component library data structure: ${pipelineLibrary}`);\r\n  }\r\n  return pipelineLibrary;\r\n};\r\n\r\nfunction notUndefined<T>(x: T | undefined): x is T {\r\n  return x !== undefined;\r\n}\r\n\r\ninterface PipelineLibraryProps {\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n}\r\n\r\nconst SamplePipelineLibrary = ({ setComponentSpec }: PipelineLibraryProps) => {\r\n  const [componentRefs, setComponentRefs] = useState<\r\n    ComponentReferenceWithSpec[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (componentRefs.length === 0) {\r\n        const loadedComponentLibrary = await loadPipelineLibraryStruct(\r\n          pipelineLibraryUrl\r\n        );\r\n        const pipelineUrls = loadedComponentLibrary.components\r\n          .map((componentRef) => componentRef.url)\r\n          .filter(notUndefined);\r\n        const loadedComponentRefs = await Promise.all(\r\n          pipelineUrls.map(async (url) => {\r\n            const componentRefPlusData = await storeComponentFromUrl(url);\r\n            const componentRef = componentRefPlusData.componentRef;\r\n            await preloadComponentReferences(componentRef.spec);\r\n            return componentRef;\r\n          })\r\n        );\r\n        setComponentRefs(loadedComponentRefs);\r\n      }\r\n    })();\r\n  }, [componentRefs.length]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        //border: \"1px solid black\",\r\n        overflow: \"auto\",\r\n        whiteSpace: \"nowrap\",\r\n      }}\r\n    >\r\n      <div style={{ overflow: \"auto\", marginLeft: \"10px\" }}>\r\n        {componentRefs.map((componentRef) => (\r\n          <div key={componentRef.digest}>\r\n            ⋮ {/* ⋮ ≡ ⋅ */}\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={(e) => {\r\n                setComponentSpec?.(componentRef.spec);\r\n              }}\r\n            >\r\n              {componentRef.spec.name ?? \"<Pipeline>\"}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SamplePipelineLibrary;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { useStoreState } from \"react-flow-renderer\";\r\nimport { ComponentSpec, isGraphImplementation } from \"../componentSpec\";\r\nimport {\r\n  loadComponentAsRefFromText,\r\n  getAllComponentFilesFromList,\r\n  ComponentFileEntry,\r\n  addComponentToListByText,\r\n  componentSpecToYaml,\r\n  writeComponentToFileListFromText,\r\n  getComponentFileFromList,\r\n  deleteComponentFileFromList,\r\n} from \"../componentStore\";\r\nimport GraphComponentLink from \"./GraphComponentLink\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\nimport SamplePipelineLibrary from \"./SamplePipelineLibrary\";\r\nimport { preloadComponentReferences } from \"./samplePipelines\";\r\n\r\nconst USER_PIPELINES_LIST_NAME = \"user_pipelines\";\r\n\r\ninterface PipelineLibraryProps {\r\n  componentSpec?: ComponentSpec;\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n}\r\n\r\nconst removeSuffixes = (s: string, suffixes: string[]) => {\r\n  for (const suffix of suffixes) {\r\n    if (s.endsWith(suffix)) {\r\n      s = s.substring(0, s.length - suffix.length);\r\n    }\r\n  }\r\n  return s;\r\n};\r\n\r\ninterface SavePipelineAsDialogProps {\r\n  isOpen: boolean;\r\n  onPipelineSave: (name: string, overwrite: boolean) => Promise<void>;\r\n  onCancel: () => void;\r\n  initialName?: string;\r\n}\r\n\r\nconst SavePipelineAsDialog = ({\r\n  isOpen,\r\n  onPipelineSave,\r\n  onCancel,\r\n  initialName,\r\n}: SavePipelineAsDialogProps) => {\r\n  const [fileName, setFileName] = useState<string | undefined>(initialName);\r\n  const [isOverwriteDialogOpen, setIsOverwriteDialogOpen] = useState(false);\r\n\r\n  const handleSave = async (name: string) => {\r\n    setFileName(name);\r\n    try {\r\n      await onPipelineSave(name, false);\r\n    } catch {\r\n      setIsOverwriteDialogOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleOverwriteOk = () => {\r\n    if (fileName) {\r\n      setIsOverwriteDialogOpen(false);\r\n      onPipelineSave(fileName, true);\r\n    }\r\n  };\r\n\r\n  const handleOverwriteCancel = () => {\r\n    setIsOverwriteDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SaveAsDialog\r\n        isOpen={isOpen}\r\n        onSave={handleSave}\r\n        onCancel={onCancel}\r\n        initialValue={fileName}\r\n        inputLabel=\"Pipeline name\"\r\n      />\r\n      <OkCancelDialog\r\n        isOpen={isOpen && isOverwriteDialogOpen}\r\n        title=\"Overwrite?\"\r\n        okButtonText=\"Overwrite\"\r\n        onOk={handleOverwriteOk}\r\n        onCancel={handleOverwriteCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\ninterface OkCancelDialogProps {\r\n  isOpen: boolean;\r\n  title: string;\r\n  okButtonText?: string;\r\n  cancelButtonText?: string;\r\n  onOk: () => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst OkCancelDialog = ({\r\n  isOpen,\r\n  title,\r\n  okButtonText = \"OK\",\r\n  cancelButtonText = \"Cancel\",\r\n  onOk,\r\n  onCancel,\r\n}: OkCancelDialogProps) => {\r\n  return (\r\n    <Dialog open={isOpen} aria-labelledby=\"alert-dialog-title\">\r\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={onCancel}>\r\n          {cancelButtonText}\r\n        </Button>\r\n        <Button color=\"secondary\" onClick={onOk}>\r\n          {okButtonText}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\ninterface SaveAsDialogProps {\r\n  isOpen: boolean;\r\n  onSave: (name: string) => void;\r\n  onCancel: () => void;\r\n  initialValue: string | undefined;\r\n  inputLabel: string;\r\n}\r\n\r\nconst SaveAsDialog = ({\r\n  isOpen,\r\n  onSave,\r\n  onCancel,\r\n  initialValue,\r\n  inputLabel = \"Pipeline name\",\r\n}: SaveAsDialogProps) => {\r\n  const nameInputRef = useRef<HTMLInputElement>();\r\n  return (\r\n    <Dialog open={isOpen} aria-labelledby=\"alert-dialog-title\">\r\n      <DialogTitle id=\"alert-dialog-title\">{\"Save pipeline\"}</DialogTitle>\r\n      <form\r\n        onSubmit={(e) => {\r\n          if (nameInputRef.current) {\r\n            onSave(nameInputRef.current.value);\r\n          }\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <DialogContent>\r\n          <TextField\r\n            id=\"name\"\r\n            type=\"text\"\r\n            defaultValue={initialValue}\r\n            label={inputLabel}\r\n            inputRef={nameInputRef}\r\n            required\r\n            autoFocus\r\n            fullWidth\r\n            margin=\"dense\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={onCancel}>Cancel</Button>\r\n          <Button color=\"primary\" type=\"submit\" autoFocus>\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst PipelineLibrary = ({\r\n  componentSpec,\r\n  setComponentSpec,\r\n}: PipelineLibraryProps) => {\r\n  // const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [componentFiles, setComponentFiles] = useState(\r\n    new Map<string, ComponentFileEntry>()\r\n  );\r\n  const [pipelineFile, setPipelineFile] = useState<ComponentFileEntry>();\r\n  const [saveAsDialogIsOpen, setSaveAsDialogIsOpen] = useState(false);\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  const [contextMenuFileName, setContextMenuFileName] = useState<string>();\r\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<HTMLElement>();\r\n\r\n  const refreshPipelines = useCallback(() => {\r\n    getAllComponentFilesFromList(USER_PIPELINES_LIST_NAME).then(\r\n      setComponentFiles\r\n    );\r\n  }, [setComponentFiles]);\r\n\r\n  useEffect(refreshPipelines, [refreshPipelines]);\r\n\r\n  const openPipelineFile = useCallback(\r\n    async (fileEntry: ComponentFileEntry) => {\r\n      // Loading all child components\r\n      // TODO: Move this functionality to the setComponentSpec function\r\n      await preloadComponentReferences(fileEntry.componentRef.spec);\r\n      setComponentSpec?.(fileEntry.componentRef.spec);\r\n      setPipelineFile(fileEntry);\r\n    },\r\n    [setComponentSpec, setPipelineFile]\r\n  );\r\n\r\n  const onDrop = useCallback(\r\n    (acceptedFiles: File[]) => {\r\n      acceptedFiles.forEach((file) => {\r\n        const reader = new FileReader();\r\n        reader.onabort = () => console.log(\"file reading was aborted\");\r\n        reader.onerror = () => console.log(\"file reading has failed\");\r\n        reader.onload = async () => {\r\n          const binaryStr = reader.result;\r\n          if (binaryStr === null || binaryStr === undefined) {\r\n            console.error(`Dropped file reader result was ${binaryStr}`);\r\n            return;\r\n          }\r\n          const fileName =\r\n            removeSuffixes(file.name, [\r\n              \".pipeline.component.yaml\",\r\n              \".component.yaml\",\r\n              \".pipeline.yaml\",\r\n              \".yaml\",\r\n            ]) || \"Pipeline\";\r\n          try {\r\n            const componentRefPlusData1 = await loadComponentAsRefFromText(\r\n              binaryStr\r\n            );\r\n            const componentRef1 = componentRefPlusData1.componentRef;\r\n            if (!isGraphImplementation(componentRef1.spec.implementation)) {\r\n              console.error(\"Dropped component is not a graph component\");\r\n              return;\r\n            }\r\n            // Caching the child components\r\n            await preloadComponentReferences(componentRef1.spec);\r\n            // TODO: Do not load the component twice\r\n            const componentRefPlusData = await addComponentToListByText(\r\n              USER_PIPELINES_LIST_NAME,\r\n              binaryStr,\r\n              fileName\r\n            );\r\n            const componentRef = componentRefPlusData.componentRef;\r\n            console.debug(\"storeComponentText succeeded\", componentRef);\r\n            (window as any).gtag?.(\"event\", \"PipelineLibrary_pipeline_import\", {\r\n              result: \"succeeded\",\r\n            });\r\n            // setErrorMessage(\"\");\r\n            refreshPipelines();\r\n          } catch (err) {\r\n            // setErrorMessage(\r\n            //   `Error parsing the dropped file as component: ${err.toString()}.`\r\n            // );\r\n            console.error(\"Error parsing the dropped file as component\", err);\r\n            (window as any).gtag?.(\"event\", \"PipelineLibrary_pipeline_import\", {\r\n              result: \"failed\",\r\n            });\r\n          }\r\n        };\r\n        reader.readAsArrayBuffer(file);\r\n      });\r\n    },\r\n    [refreshPipelines]\r\n  );\r\n\r\n  const openSaveAsDialog = useCallback(() => {\r\n    setSaveAsDialogIsOpen(true);\r\n  }, [setSaveAsDialogIsOpen]);\r\n\r\n  const closeSaveAsDialog = useCallback(() => {\r\n    setSaveAsDialogIsOpen(false);\r\n  }, [setSaveAsDialogIsOpen]);\r\n\r\n  const handlePipelineSave = useCallback(\r\n    async (name: string, overwrite: boolean = false) => {\r\n      if (!overwrite) {\r\n        const existingFileEntry = await getComponentFileFromList(\r\n          USER_PIPELINES_LIST_NAME,\r\n          name\r\n        );\r\n        if (existingFileEntry !== null) {\r\n          throw Error(`File \"${name}\" already exists.`);\r\n        }\r\n      }\r\n      if (!componentSpec) {\r\n        return;\r\n      }\r\n      const graphComponent = augmentComponentSpec(\r\n        componentSpec,\r\n        nodes,\r\n        false,\r\n        true\r\n      );\r\n      graphComponent.name = name;\r\n      const componentText = componentSpecToYaml(graphComponent);\r\n      const fileEntry = await writeComponentToFileListFromText(\r\n        USER_PIPELINES_LIST_NAME,\r\n        name,\r\n        componentText\r\n      );\r\n      await openPipelineFile(fileEntry);\r\n      closeSaveAsDialog();\r\n      refreshPipelines();\r\n    },\r\n    [\r\n      componentSpec,\r\n      closeSaveAsDialog,\r\n      nodes,\r\n      openPipelineFile,\r\n      refreshPipelines,\r\n    ]\r\n  );\r\n\r\n  const handleContextMenuDelete = async () => {\r\n    if (contextMenuFileName) {\r\n      setContextMenuFileName(undefined);\r\n      await deleteComponentFileFromList(\r\n        USER_PIPELINES_LIST_NAME,\r\n        contextMenuFileName\r\n      );\r\n      refreshPipelines();\r\n    }\r\n  };\r\n\r\n  const handleContextMenuOpen = async () => {\r\n    if (contextMenuFileName) {\r\n      setContextMenuFileName(undefined);\r\n      const fileEntry = await getComponentFileFromList(\r\n        USER_PIPELINES_LIST_NAME,\r\n        contextMenuFileName\r\n      );\r\n      if (!fileEntry) {\r\n        console.error(\r\n          `handleContextMenuOpen: File ${contextMenuFileName} does not exist.`\r\n        );\r\n        return;\r\n      }\r\n      await openPipelineFile(fileEntry);\r\n    }\r\n  };\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null);\r\n  const componentLink = useRef<HTMLAnchorElement>(null);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        //border: \"1px solid black\",\r\n        overflow: \"auto\",\r\n        whiteSpace: \"nowrap\",\r\n      }}\r\n    >\r\n      <div style={{ margin: \"5px\" }}>\r\n        <button\r\n          onClick={(e) => {\r\n            if (pipelineFile) {\r\n              handlePipelineSave(pipelineFile?.name, true);\r\n            } else {\r\n              openSaveAsDialog();\r\n            }\r\n          }}\r\n        >\r\n          Save\r\n        </button>\r\n        <button onClick={openSaveAsDialog}>Save as</button>\r\n        {componentSpec && (\r\n          <SavePipelineAsDialog\r\n            initialName={componentSpec.name}\r\n            isOpen={saveAsDialogIsOpen}\r\n            onCancel={closeSaveAsDialog}\r\n            onPipelineSave={handlePipelineSave}\r\n          />\r\n        )}\r\n        <input\r\n          ref={fileInput}\r\n          type=\"file\"\r\n          accept=\".yaml\"\r\n          onChange={(e) => onDrop(Array.from(e.target.files ?? []))}\r\n          style={{ display: \"none\" }}\r\n        />\r\n        <button onClick={(e) => fileInput.current?.click()}>+ Import</button>\r\n        <button\r\n          onClick={(e) => {\r\n            componentLink.current?.click();\r\n          }}\r\n        >\r\n          Export\r\n        </button>\r\n        {componentSpec && (\r\n          <GraphComponentLink\r\n            linkRef={componentLink}\r\n            componentSpec={componentSpec}\r\n            linkText=\"🔗\"\r\n            downloadFileName={\r\n              (componentSpec.name ? componentSpec.name + \".\" : \"\") +\r\n              \"pipeline.component.yaml\"\r\n            }\r\n            style={{ textDecoration: \"none\" }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div style={{ overflow: \"auto\", marginLeft: \"10px\" }}>\r\n        {Array.from(componentFiles.entries()).map(([fileName, fileEntry]) => (\r\n          <div key={fileName}>\r\n            ⋮ {/* ⋮ ≡ ⋅ */}\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={(e) => openPipelineFile(fileEntry)}\r\n              style={\r\n                fileName === pipelineFile?.name\r\n                  ? { fontWeight: \"bold\" }\r\n                  : undefined\r\n              }\r\n              onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                setContextMenuAnchor(e.currentTarget);\r\n                setContextMenuFileName(fileName);\r\n              }}\r\n            >\r\n              {fileName}\r\n            </button>\r\n          </div>\r\n        ))}\r\n        <Menu\r\n          open={contextMenuFileName !== undefined}\r\n          anchorEl={contextMenuAnchor}\r\n          onClose={() => {\r\n            setContextMenuFileName(undefined);\r\n          }}\r\n        >\r\n          <MenuItem dense={true} onClick={handleContextMenuOpen}>\r\n            Open\r\n          </MenuItem>\r\n          <MenuItem dense={true} onClick={handleContextMenuDelete}>\r\n            Delete\r\n          </MenuItem>\r\n        </Menu>\r\n      </div>\r\n      <details\r\n        open\r\n        style={{\r\n          border: \"1px solid #aaa\",\r\n          borderRadius: \"4px\",\r\n          padding: \"4px\",\r\n        }}\r\n      >\r\n        <summary>\r\n          <strong>Sample pipelines</strong>\r\n        </summary>\r\n        <SamplePipelineLibrary setComponentSpec={setComponentSpec} />\r\n      </details>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PipelineLibrary;\r\n"],"sourceRoot":""}